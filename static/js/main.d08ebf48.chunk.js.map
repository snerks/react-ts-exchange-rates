{"version":3,"sources":["models/Currencies.ts","components/ExchangeRates.tsx","components/ExchangeRatesForm.tsx","components/FetchExchangeRateLatest.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CurrencyMetadata","GBP","isoCode","symbol","name","EUR","USD","AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTC","BTN","BWP","BYN","BZD","CAD","CDF","CHF","CLF","CLP","CNH","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","FJD","FKP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MRU","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STD","STN","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TWD","TZS","UAH","UGX","UYU","UZS","VEF","VES","VND","VUV","WST","XAF","XAG","XAU","XCD","XDR","XOF","XPD","XPF","XPT","YER","ZAR","ZMW","ZWL","useStyles","makeStyles","root","width","overflowX","table","th","fontWeight","formControl","minWidth","selectEmpty","ExchangeRatesDateRange","data","classes","React","useState","checkedAll","state","setState","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","className","TableBody","scope","base","start_at","toString","end_at","FormGroup","row","style","margin","FormControlLabel","control","Checkbox","checked","onChange","event","target","value","color","label","Hidden","xsDown","align","rates","Object","keys","entries","sort","map","rate","startDateRate","endDateRate","currencyMetadata","key","toFixed","getDirectionElement","ExchangeRatesForm","props","sourceCurrencyIsoCode","sourceCurrencyIsoCodeNormalised","setSourceCurrencyIsoCodeNormalised","supportedCurrencyIsoCodes","FormControl","InputLabel","id","Select","labelId","handleSourceCurrencyChange","MenuItem","title","getCurrencyItemDisplayName","FetchExchangeRateLatest","getDateFromDaysAgo","daysAgo","daysInMilliseconds","Date","valueOf","endDateDaysAgo","dateRangeData","setDateRangeData","date","success","historical","loading","setLoading","useEffect","a","startDateIso","toISOString","split","endDateIso","urlStartDate","fetch","responseJsonStartDate","json","responseStartDate","urlEndDate","responseJsonEndDate","responseEndDate","dateRangeDataTemp","console","log","fetchExchangeRatesDateRange","ExchangeRates","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d08ebf48.chunk.js","sourcesContent":["export interface CurrencyInfo {\r\n  isoCode: string;\r\n  symbol: string;\r\n  name: string;\r\n}\r\n\r\nexport interface CurrencyInfoItems {\r\n  [key: string]: CurrencyInfo;\r\n}\r\n\r\nexport const CurrencyMetadata: CurrencyInfoItems = {\r\n  GBP: { isoCode: \"GBP\", symbol: \"£\", name: \"British Pound\" },\r\n  EUR: { isoCode: \"EUR\", symbol: \"€\", name: \"Euro\" },\r\n  USD: { isoCode: \"USD\", symbol: \"$\", name: \"US Dollar\" },\r\n\r\n  AED: { \"name\": \"United Arab Emirates Dirham\", \"isoCode\": \"AED\", symbol: \"د.إ\" },\r\n  AFN: { \"name\": \"Afghan Afghani\", \"isoCode\": \"AFN\", symbol: \"؋\" },\r\n  ALL: { \"name\": \"Albanian Lek\", \"isoCode\": \"ALL\", symbol: \"L\" },\r\n  AMD: { \"name\": \"Armenian Dram\", \"isoCode\": \"AMD\", symbol: \"֏\" },\r\n  ANG: { \"name\": \"Netherlands Antillean Guilder\", \"isoCode\": \"ANG\", symbol: \"ƒ\" },\r\n  AOA: { \"name\": \"Angolan Kwanza\", \"isoCode\": \"AOA\", symbol: \"Kz\" },\r\n  ARS: { \"name\": \"Argentine Peso\", \"isoCode\": \"ARS\", symbol: \"CLP$\" },\r\n  AUD: { \"name\": \"Australian Dollar\", \"isoCode\": \"AUD\", symbol: \"$\" },\r\n  AWG: { \"name\": \"Aruban Florin\", \"isoCode\": \"AWG\", symbol: \"ƒ\" },\r\n  AZN: { \"name\": \"Azerbaijani Manat\", \"isoCode\": \"AZN\", symbol: \"₼\" },\r\n  BAM: {\r\n    \"name\": \"Bosnia-Herzegovina Convertible Mark\",\r\n    \"isoCode\": \"BAM\"\r\n , symbol: \"KM\" },\r\n  BBD: { \"name\": \"Barbadian Dollar\", \"isoCode\": \"BBD\", symbol: \"Bds$\" },\r\n  BDT: { \"name\": \"Bangladeshi Taka\", \"isoCode\": \"BDT\", symbol: \"৳\" },\r\n  BGN: { \"name\": \"Bulgarian Lev\", \"isoCode\": \"BGN\", symbol: \"лв.\" },\r\n  BHD: { \"name\": \"Bahraini Dinar\", \"isoCode\": \"BHD\", symbol: \".د.ب\" },\r\n  BIF: { \"name\": \"Burundian Franc\", \"isoCode\": \"BIF\", symbol: \"FBu\" },\r\n  BMD: { \"name\": \"Bermudan Dollar\", \"isoCode\": \"BMD\", symbol: \"BD$\" },\r\n  BND: { \"name\": \"Brunei Dollar\", \"isoCode\": \"BND\", symbol: \"B$\" },\r\n  BOB: { \"name\": \"Bolivian Boliviano\", \"isoCode\": \"BOB\", symbol: \"[]\" },\r\n  BRL: { \"name\": \"Brazilian Real\", \"isoCode\": \"BRL\", symbol: \"R$\" },\r\n  BSD: { \"name\": \"Bahamian Dollar\", \"isoCode\": \"BSD\", symbol: \"B$\" },\r\n  BTC: { \"name\": \"Bitcoin\", \"isoCode\": \"BTC\", symbol: \"฿\" },\r\n  BTN: { \"name\": \"Bhutanese Ngultrum\", \"isoCode\": \"BTN\", symbol: \"Ch.\" },\r\n\r\n  BWP: { \"name\": \"Botswanan Pula\", \"isoCode\": \"BWP\", symbol: \"P\" },\r\n  BYN: { \"name\": \"Belarusian Ruble\", \"isoCode\": \"BYN\", symbol: \"Br\" },\r\n  BZD: { \"name\": \"Belize Dollar\", \"isoCode\": \"BZD\", symbol: \"BZ$\" },\r\n  CAD: { \"name\": \"Canadian Dollar\", \"isoCode\": \"CAD\", symbol: \"CA$\" },\r\n  CDF: { \"name\": \"Congolese Franc\", \"isoCode\": \"CDF\", symbol: \"CF\" },\r\n  CHF: { \"name\": \"Swiss Franc\", \"isoCode\": \"CHF\", symbol: \"SFr\" },\r\n  CLF: { \"name\": \"Chilean Unit of Account (UF)\", \"isoCode\": \"CLF\", symbol: \"[]\" },\r\n  CLP: { \"name\": \"Chilean Peso\", \"isoCode\": \"CLP\", symbol: \"CLP$\" },\r\n  CNH: { \"name\": \"Chinese Yuan (Offshore)\", \"isoCode\": \"CNH\", symbol: \"¥\" },\r\n  CNY: { \"name\": \"Chinese Yuan\", \"isoCode\": \"CNY\", symbol: \"¥\" },\r\n  COP: { \"name\": \"Colombian Peso\", \"isoCode\": \"COP\", symbol: \"COP$\" },\r\n  CRC: { \"name\": \"Costa Rican Colón\", \"isoCode\": \"CRC\", symbol: \"₡\" },\r\n  CUC: { \"name\": \"Cuban Convertible Peso\", \"isoCode\": \"CUC\", symbol: \"CUC$\" },\r\n  CUP: { \"name\": \"Cuban Peso\", \"isoCode\": \"CUP\", symbol: \"$MN\" },\r\n  CVE: { \"name\": \"Cape Verdean Escudo\", \"isoCode\": \"CVE\", symbol: \"Esc\" },\r\n  CZK: { \"name\": \"Czech Republic Koruna\", \"isoCode\": \"CZK\", symbol: \"Kč\" },\r\n  DJF: { \"name\": \"Djiboutian Franc\", \"isoCode\": \"DJF\", symbol: \"Fdj\" },\r\n  DKK: { \"name\": \"Danish Krone\", \"isoCode\": \"DKK\", symbol: \"kr.\" },\r\n  DOP: { \"name\": \"Dominican Peso\", \"isoCode\": \"DOP\", symbol: \"RD$\" },\r\n  DZD: { \"name\": \"Algerian Dinar\", \"isoCode\": \"DZD\", symbol: \"دج\" },\r\n  EGP: { \"name\": \"Egyptian Pound\", \"isoCode\": \"EGP\", symbol: \"E£\" },\r\n  ERN: { \"name\": \"Eritrean Nakfa\", \"isoCode\": \"ERN\", symbol: \"Nfk\" },\r\n  ETB: { \"name\": \"Ethiopian Birr\", \"isoCode\": \"ETB\", symbol: \"pt\" },\r\n\r\n  // EUR: { \"name\": \"Euro\", \"isoCode\": \"EUR\", symbol: \"£\" },\r\n  FJD: { \"name\": \"Fijian Dollar\", \"isoCode\": \"FJD\", symbol: \"FJ$\" },\r\n  FKP: { \"name\": \"Falkland Islands Pound\", \"isoCode\": \"FKP\", symbol: \"£\" },\r\n  // GBP: { \"name\": \"British Pound Sterling\", \"isoCode\": \"GBP\", symbol: \"£\" },\r\n  GEL: { \"name\": \"Georgian Lari\", \"isoCode\": \"GEL\", symbol: \"₾\" },\r\n  GGP: { \"name\": \"Guernsey Pound\", \"isoCode\": \"GGP\", symbol: \"£\" },\r\n  GHS: { \"name\": \"Ghanaian Cedi\", \"isoCode\": \"GHS\", symbol: \"GH₵\" },\r\n  GIP: { \"name\": \"Gibraltar Pound\", \"isoCode\": \"GIP\", symbol: \"£\" },\r\n  GMD: { \"name\": \"Gambian Dalasi\", \"isoCode\": \"GMD\", symbol: \"D\" },\r\n\r\n  GNF: { \"name\": \"Guinean Franc\", \"isoCode\": \"GNF\", symbol: \"FG\" },\r\n  GTQ: { \"name\": \"Guatemalan Quetzal\", \"isoCode\": \"GTQ\", symbol: \"Q\" },\r\n  GYD: { \"name\": \"Guyanaese Dollar\", \"isoCode\": \"GYD\", symbol: \"G$\" },\r\n  HKD: { \"name\": \"Hong Kong Dollar\", \"isoCode\": \"HKD\", symbol: \"HK$\" },\r\n  HNL: { \"name\": \"Honduran Lempira\", \"isoCode\": \"HNL\", symbol: \"L\" },\r\n  HRK: { \"name\": \"Croatian Kuna\", \"isoCode\": \"HRK\", symbol: \"kn\" },\r\n  HTG: { \"name\": \"Haitian Gourde\", \"isoCode\": \"HTG\", symbol: \"G\" },\r\n  HUF: { \"name\": \"Hungarian Forint\", \"isoCode\": \"HUF\", symbol: \"Ft\" },\r\n  IDR: { \"name\": \"Indonesian Rupiah\", \"isoCode\": \"IDR\", symbol: \"Rp\" },\r\n  ILS: { \"name\": \"Israeli New Sheqel\", \"isoCode\": \"ILS\", symbol: \"₪\" },\r\n  IMP: { \"name\": \"Manx pound\", \"isoCode\": \"IMP\", symbol: \"£\" },\r\n  INR: { \"name\": \"Indian Rupee\", \"isoCode\": \"INR\", symbol: \"₹\" },\r\n  IQD: { \"name\": \"Iraqi Dinar\", \"isoCode\": \"IQD\", symbol: \"د.ع\" },\r\n  IRR: { \"name\": \"Iranian Rial\", \"isoCode\": \"IRR\", symbol: \"﷼\" },\r\n  ISK: { \"name\": \"Icelandic Króna\", \"isoCode\": \"ISK\", symbol: \"kr\" },\r\n  JEP: { \"name\": \"Jersey Pound\", \"isoCode\": \"JEP\", symbol: \"£\" },\r\n  JMD: { \"name\": \"Jamaican Dollar\", \"isoCode\": \"JMD\", symbol: \"J$\" },\r\n  JOD: { \"name\": \"Jordanian Dinar\", \"isoCode\": \"JOD\", symbol: \"JD\" },\r\n  JPY: { \"name\": \"Japanese Yen\", \"isoCode\": \"JPY\", symbol: \"¥\" },\r\n  KES: { \"name\": \"Kenyan Shilling\", \"isoCode\": \"KES\", symbol: \"Ksh\" },\r\n  KGS: { \"name\": \"Kyrgystani Som\", \"isoCode\": \"KGS\", symbol: \"сом\" },\r\n  KHR: { \"name\": \"Cambodian Riel\", \"isoCode\": \"KHR\", symbol: \"៛\" },\r\n  KMF: { \"name\": \"Comorian Franc\", \"isoCode\": \"KMF\", symbol: \"CF\" },\r\n  KPW: { \"name\": \"North Korean Won\", \"isoCode\": \"KPW\", symbol: \"₩\" },\r\n  KRW: { \"name\": \"South Korean Won\", \"isoCode\": \"KRW\", symbol: \"₩\" },\r\n  KWD: { \"name\": \"Kuwaiti Dinar\", \"isoCode\": \"KWD\", symbol: \"د.ك\" },\r\n\r\n  KYD: { \"name\": \"Cayman Islands Dollar\", \"isoCode\": \"KYD\", symbol: \"CI$\" },\r\n  KZT: { \"name\": \"Kazakhstani Tenge\", \"isoCode\": \"KZT\", symbol: \"₸\" },\r\n  LAK: { \"name\": \"Laotian Kip\", \"isoCode\": \"LAK\", symbol: \"₭N\" },\r\n  LBP: { \"name\": \"Lebanese Pound\", \"isoCode\": \"LBP\", symbol: \"LL\" },\r\n  LKR: { \"name\": \"Sri Lankan Rupee\", \"isoCode\": \"LKR\", symbol: \"₨\" },\r\n  LRD: { \"name\": \"Liberian Dollar\", \"isoCode\": \"LRD\", symbol: \"L$\" },\r\n  LSL: { \"name\": \"Lesotho Loti\", \"isoCode\": \"LSL\", symbol: \"L\" },\r\n\r\n  LYD: { \"name\": \"Libyan Dinar\", \"isoCode\": \"LYD\", symbol: \"ل.د\" },\r\n  MAD: { \"name\": \"Moroccan Dirham\", \"isoCode\": \"MAD\", symbol: \".م.\" },\r\n  MDL: { \"name\": \"Moldovan Leu\", \"isoCode\": \"MDL\", symbol: \"L\" },\r\n  MGA: { \"name\": \"Malagasy Ariary\", \"isoCode\": \"MGA\", symbol: \"Ar\" },\r\n  MKD: { \"name\": \"Macedonian Denar\", \"isoCode\": \"MKD\", symbol: \"ден\" },\r\n  MMK: { \"name\": \"Myanma Kyat\", \"isoCode\": \"MMK\", symbol: \"K\" },\r\n  MNT: { \"name\": \"Mongolian Tugrik\", \"isoCode\": \"MNT\", symbol: \"₮\" },\r\n  MOP: { \"name\": \"Macanese Pataca\", \"isoCode\": \"MOP\", symbol: \"MOP$\" },\r\n  MRO: { \"name\": \"Mauritanian Ouguiya (pre-2018)\", \"isoCode\": \"MRO\", symbol: \"UM\" },\r\n  MRU: { \"name\": \"Mauritanian Ouguiya\", \"isoCode\": \"MRU\", symbol: \"UM\" },\r\n  MUR: { \"name\": \"Mauritian Rupee\", \"isoCode\": \"MUR\", symbol: \"₨\" },\r\n\r\n  MVR: { \"name\": \"Maldivian Rufiyaa\", \"isoCode\": \"MVR\", symbol: \"Rf.\" },\r\n  MWK: { \"name\": \"Malawian Kwacha\", \"isoCode\": \"MWK\", symbol: \"K\" },\r\n  MXN: { \"name\": \"Mexican Peso\", \"isoCode\": \"MXN\", symbol: \"Mex$\" },\r\n  MYR: { \"name\": \"Malaysian Ringgit\", \"isoCode\": \"MYR\", symbol: \"RM\" },\r\n  MZN: { \"name\": \"Mozambican Metical\", \"isoCode\": \"MZN\", symbol: \"MT\" },\r\n  NAD: { \"name\": \"Namibian Dollar\", \"isoCode\": \"NAD\", symbol: \"N$\" },\r\n  NGN: { \"name\": \"Nigerian Naira\", \"isoCode\": \"NGN\", symbol: \"₦\" },\r\n  NIO: { \"name\": \"Nicaraguan Córdoba\", \"isoCode\": \"NIO\", symbol: \"C$\" },\r\n\r\n  NOK: { \"name\": \"Norwegian Krone\", \"isoCode\": \"NOK\", symbol: \"kr\" },\r\n  NPR: { \"name\": \"Nepalese Rupee\", \"isoCode\": \"NPR\", symbol: \"₨\" },\r\n  NZD: { \"name\": \"New Zealand Dollar\", \"isoCode\": \"NZD\", symbol: \"NZ$\" },\r\n  OMR: { \"name\": \"Omani Rial\", \"isoCode\": \"OMR\", symbol: \"ع.\" },\r\n  PAB: { \"name\": \"Panamanian Balboa\", \"isoCode\": \"PAB\", symbol: \"B/.\" },\r\n  PEN: { \"name\": \"Peruvian Nuevo Sol\", \"isoCode\": \"PEN\", symbol: \"S/\" },\r\n  PGK: { \"name\": \"Papua New Guinean Kina\", \"isoCode\": \"PGK\", symbol: \"K\" },\r\n  PHP: { \"name\": \"Philippine Peso\", \"isoCode\": \"PHP\", symbol: \"₱\" },\r\n\r\n  PKR: { \"name\": \"Pakistani Rupee\", \"isoCode\": \"PKR\", symbol: \"₨\" },\r\n  PLN: { \"name\": \"Polish Zloty\", \"isoCode\": \"PLN\", symbol: \"zł\" },\r\n  PYG: { \"name\": \"Paraguayan Guarani\", \"isoCode\": \"PYG\", symbol: \"₲\" },\r\n  QAR: { \"name\": \"Qatari Rial\", \"isoCode\": \"QAR\", symbol: \"ر.ق\" },\r\n  RON: { \"name\": \"Romanian Leu\", \"isoCode\": \"RON\", symbol: \"lei\" },\r\n  RSD: { \"name\": \"Serbian Dinar\", \"isoCode\": \"RSD\", symbol: \"дин\" },\r\n  RUB: { \"name\": \"Russian Ruble\", \"isoCode\": \"RUB\", symbol: \"₽\" },\r\n  RWF: { \"name\": \"Rwandan Franc\", \"isoCode\": \"RWF\", symbol: \"FRw\" },\r\n  SAR: { \"name\": \"Saudi Riyal\", \"isoCode\": \"SAR\", symbol: \"ر.س\" },\r\n  SBD: { \"name\": \"Solomon Islands Dollar\", \"isoCode\": \"SBD\", symbol: \"SI$\" },\r\n\r\n  SCR: { \"name\": \"Seychellois Rupee\", \"isoCode\": \"SCR\", symbol: \"SRe\" },\r\n  SDG: { \"name\": \"Sudanese Pound\", \"isoCode\": \"SDG\", symbol: \"£\" },\r\n  SEK: { \"name\": \"Swedish Krona\", \"isoCode\": \"SEK\", symbol: \"kr\" },\r\n  SGD: { \"name\": \"Singapore Dollar\", \"isoCode\": \"SGD\", symbol: \"S$\" },\r\n  SHP: { \"name\": \"Saint Helena Pound\", \"isoCode\": \"SHP\", symbol: \"£\" },\r\n  SLL: { \"name\": \"Sierra Leonean Leone\", \"isoCode\": \"SLL\", symbol: \"Le\" },\r\n  SOS: { \"name\": \"Somali Shilling\", \"isoCode\": \"SOS\", symbol: \"Sh.So.\" },\r\n  SRD: { \"name\": \"Surinamese Dollar\", \"isoCode\": \"SRD\", symbol: \"SRD\" },\r\n\r\n  SSP: { \"name\": \"South Sudanese Pound\", \"isoCode\": \"SSP\", symbol: \"£\" },\r\n  STD: {\r\n    \"name\": \"São Tomé and Príncipe Dobra (pre-2018)\",\r\n    \"isoCode\": \"STD\"\r\n , symbol: \"£\" },\r\n  STN: { \"name\": \"São Tomé and Príncipe Dobra\", \"isoCode\": \"STN\", symbol: \"Db\" },\r\n  SVC: { \"name\": \"Salvadoran Colón\", \"isoCode\": \"SVC\", symbol: \"₡\" },\r\n  SYP: { \"name\": \"Syrian Pound\", \"isoCode\": \"SYP\", symbol: \"LS\" },\r\n  SZL: { \"name\": \"Swazi Lilangeni\", \"isoCode\": \"SZL\", symbol: \"L\" },\r\n\r\n  THB: { \"name\": \"Thai Baht\", \"isoCode\": \"THB\", symbol: \"฿\" },\r\n  TJS: { \"name\": \"Tajikistani Somoni\", \"isoCode\": \"TJS\", symbol: \"[]\" },\r\n  TMT: { \"name\": \"Turkmenistani Manat\", \"isoCode\": \"TMT\", symbol: \"[]\" },\r\n  TND: { \"name\": \"Tunisian Dinar\", \"isoCode\": \"TND\", symbol: \"د.ت\" },\r\n  TOP: { \"name\": \"Tongan Pa'anga\", \"isoCode\": \"TOP\", symbol: \"T$\" },\r\n  TRY: { \"name\": \"Turkish Lira\", \"isoCode\": \"TRY\", symbol: \"₺\" },\r\n  TTD: { \"name\": \"Trinidad and Tobago Dollar\", \"isoCode\": \"TTD\", symbol: \"TT$\" },\r\n  TWD: { \"name\": \"New Taiwan Dollar\", \"isoCode\": \"TWD\", symbol: \"NT$\" },\r\n  TZS: { \"name\": \"Tanzanian Shilling\", \"isoCode\": \"TZS\", symbol: \"Tsh\" },\r\n\r\n  UAH: { \"name\": \"Ukrainian Hryvnia\", \"isoCode\": \"UAH\", symbol: \"₴\" },\r\n  UGX: { \"name\": \"Ugandan Shilling\", \"isoCode\": \"UGX\", symbol: \"USh\" },\r\n  // USD: { \"name\": \"United States Dollar\", \"isoCode\": \"USD\", symbol: \"£\" },\r\n  UYU: { \"name\": \"Uruguayan Peso\", \"isoCode\": \"UYU\", symbol: \"$U\" },\r\n  UZS: { \"name\": \"Uzbekistan Som\", \"isoCode\": \"UZS\", symbol: \"[]\" },\r\n  VEF: { \"name\": \"Venezuelan Bolívar Fuerte (Old)\", \"isoCode\": \"VEF\", symbol: \"Bs.S.\" },\r\n  VES: { \"name\": \"Venezuelan Bolívar Soberano\", \"isoCode\": \"VES\", symbol: \"Bs.S.\" },\r\n  VND: { \"name\": \"Vietnamese Dong\", \"isoCode\": \"VND\", symbol: \"₫\" },\r\n  VUV: { \"name\": \"Vanuatu Vatu\", \"isoCode\": \"VUV\", symbol: \"VT\" },\r\n\r\n  WST: { \"name\": \"Samoan Tala\", \"isoCode\": \"WST\", symbol: \"WS$\" },\r\n  XAF: { \"name\": \"CFA Franc BEAC\", \"isoCode\": \"XAF\", symbol: \"FCFA\" },\r\n  XAG: { \"name\": \"Silver Ounce\", \"isoCode\": \"XAG\", symbol: \"[]\" },\r\n  XAU: { \"name\": \"Gold Ounce\", \"isoCode\": \"XAU\", symbol: \"[]\" },\r\n  XCD: { \"name\": \"East Caribbean Dollar\", \"isoCode\": \"XCD\", symbol: \"EC$\" },\r\n  XDR: { \"name\": \"Special Drawing Rights\", \"isoCode\": \"XDR\", symbol: \"[]\" },\r\n  XOF: { \"name\": \"CFA Franc BCEAO\", \"isoCode\": \"XOF\", symbol: \"FCFA\" },\r\n  XPD: { \"name\": \"Palladium Ounce\", \"isoCode\": \"XPD\", symbol: \"[]\" },\r\n  XPF: { \"name\": \"CFP Franc\", \"isoCode\": \"XPF\", symbol: \"CFA\" },\r\n  XPT: { \"name\": \"Platinum Ounce\", \"isoCode\": \"XPT\", symbol: \"[]\" },\r\n  YER: { \"name\": \"Yemeni Rial\", \"isoCode\": \"YER\", symbol: \"ر.ي\" },\r\n  ZAR: { \"name\": \"South African Rand\", \"isoCode\": \"ZAR\", symbol: \"R\" },\r\n  ZMW: { \"name\": \"Zambian Kwacha\", \"isoCode\": \"ZMW\", symbol: \"K\" },\r\n  ZWL: { \"name\": \"Zimbabwean Dollar\", \"isoCode\": \"ZWL\", symbol: \"Z$\" }\r\n\r\n  // AUD: { isoCode: \"AUD\", symbol: \"$\", name: \"Australian Dollar\", symbol: \"£\" },\r\n  // BGN: { isoCode: \"BGN\", symbol: \"лв.\", name: \"Bulgarian Lev\", symbol: \"£\" },\r\n  // BRL: { isoCode: \"BRL\", symbol: \"R$\", name: \"Brazilian Real\", symbol: \"£\" },\r\n  // CAD: { isoCode: \"CAD\", symbol: \"$\", name: \"Canadian Dollar\", symbol: \"£\" },\r\n  // CHF: { isoCode: \"CHF\", symbol: \"CHF\", name: \"Swiss Franc\", symbol: \"£\" },\r\n  // CNY: { isoCode: \"CNY\", symbol: \"¥\", name: \"Chinese Yuan\", symbol: \"£\" },\r\n  // CZK: { isoCode: \"CZK\", symbol: \"Kč\", name: \"Czech Koruna\", symbol: \"£\" },\r\n  // DKK: { isoCode: \"DKK\", symbol: \"kr.\", name: \"Danish Krone\", symbol: \"£\" },\r\n  // HKD: { isoCode: \"HKD\", symbol: \"$\", name: \"Hong Kong Dollar\", symbol: \"£\" },\r\n  // HRK: { isoCode: \"HRK\", symbol: \"kn\", name: \"Croatian Kuna\", symbol: \"£\" },\r\n  // HUF: { isoCode: \"HUF\", symbol: \"Ft\", name: \"Hungarian Forint\", symbol: \"£\" },\r\n  // IDR: { isoCode: \"IDR\", symbol: \"Rp\", name: \"Indonesian Rupiah\", symbol: \"£\" },\r\n  // ILS: { isoCode: \"ILS\", symbol: \"₪\", name: \"Israeli New Shekel\", symbol: \"£\" },\r\n  // INR: { isoCode: \"INR\", symbol: \"₹\", name: \"Indian Rupee\", symbol: \"£\" },\r\n  // ISK: { isoCode: \"ISK\", symbol: \"kr\", name: \"Icelandic Króna\", symbol: \"£\" },\r\n  // JPY: { isoCode: \"JPY\", symbol: \"¥\", name: \"Japanese Yen\", symbol: \"£\" },\r\n  // KRW: { isoCode: \"KRW\", symbol: \"₩\", name: \"South Korean Won\", symbol: \"£\" },\r\n  // MXN: { isoCode: \"MXN\", symbol: \"$\", name: \"Mexican Peso\", symbol: \"£\" },\r\n\r\n  // MYR: { isoCode: \"MYR\", symbol: \"RM\", name: \"Malaysian Ringgit\", symbol: \"£\" },\r\n  // NOK: { isoCode: \"NOK\", symbol: \"kr\", name: \"Norwegian Krone\", symbol: \"£\" },\r\n  // NZD: { isoCode: \"NZD\", symbol: \"$\", name: \"New Zealand Dollar\", symbol: \"£\" },\r\n  // PHP: { isoCode: \"PHP\", symbol: \"₱\", name: \"Philippine Piso\", symbol: \"£\" },\r\n  // PLN: { isoCode: \"PLN\", symbol: \"zł\", name: \"Polish Zloty\", symbol: \"£\" },\r\n  // RON: { isoCode: \"RON\", symbol: \"lei\", name: \"Romanian Leu\", symbol: \"£\" },\r\n\r\n  // RUB: { isoCode: \"RUB\", symbol: \"₽\", name: \"Russian Ruble\", symbol: \"£\" },\r\n  // SEK: { isoCode: \"SEK\", symbol: \"kr\", name: \"Swedish Krona\", symbol: \"£\" },\r\n  // SGD: { isoCode: \"SGD\", symbol: \"$\", name: \"Singapore Dollar\", symbol: \"£\" },\r\n\r\n  // THB: { isoCode: \"THB\", symbol: \"฿\", name: \"Thai Baht\", symbol: \"£\" },\r\n  // TRY: { isoCode: \"TRY\", symbol: \"₺\", name: \"Turkish Lira\", symbol: \"£\" },\r\n\r\n  // ZAR: { isoCode: \"ZAR\", symbol: \"R\", name: \"South African Rand\", symbol: \"£\" }\r\n};\r\n","import React from \"react\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport { CurrencyMetadata } from \"../models/Currencies\";\r\nimport { ExchangeRateHistoricalDateResponse } from \"../models/Historical\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    // minWidth: 650\r\n  },\r\n  th: {\r\n    fontWeight: 900\r\n  },\r\n  formControl: {\r\n    // margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    // marginTop: theme.spacing(2),\r\n  }\r\n});\r\n\r\n// const useStyles = makeStyles((theme: Theme) =>\r\n//   createStyles({\r\n//     root: {\r\n//       flexGrow: 1,\r\n//     },\r\n//     container: {\r\n//       display: 'flex',\r\n//       flexWrap: 'wrap',\r\n//     },\r\n//     paper: {\r\n//       padding: theme.spacing(2),\r\n//       textAlign: 'center',\r\n//       color: theme.palette.text.secondary,\r\n//       flex: '1 0 auto',\r\n//       margin: theme.spacing(1),\r\n//     },\r\n//   }),\r\n// );\r\n\r\n// interface ExchangeRatesProps {\r\n//   data: ExchangeRateLatestResponse;\r\n// }\r\n\r\n// const ExchangeRates: React.FC<ExchangeRatesProps> = ({ data }) => {\r\n//   const classes = useStyles();\r\n\r\n//   // const theme = useTheme();\r\n//   // const breakpoints = theme.breakpoints;\r\n\r\n//   // console.log(\"breakpoints\", breakpoints);\r\n\r\n//   const [state, setState] = React.useState({\r\n//     checkedAll: false\r\n//     // checkedB: true,\r\n//     // checkedF: true,\r\n//     // checkedG: true,\r\n//   });\r\n\r\n//   // const [\r\n//   //   sourceCourrencyIsoCodeNormalised,\r\n//   //   setSourceCourrencyIsoCodeNormalised\r\n//   // ] = useState(data.base || \"GBP\");\r\n\r\n//   const handleChange = (name: string) => (\r\n//     event: React.ChangeEvent<HTMLInputElement>\r\n//   ) => {\r\n//     setState({ ...state, [name]: event.target.checked });\r\n//   };\r\n\r\n//   // const handleSourceCurrencyChange = (\r\n//   //   event: React.ChangeEvent<{ value: unknown }>\r\n//   // ) => {\r\n//   //   setSourceCourrencyIsoCodeNormalised(event.target.value as string);\r\n//   // };\r\n\r\n//   return (\r\n//     <>\r\n//       <TableContainer component={Paper}>\r\n//         <Table\r\n//           className={classes.table}\r\n//           size=\"small\"\r\n//           aria-label=\"Source Currency\"\r\n//         >\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <TableCell className={classes.th}>Source Currency</TableCell>\r\n//               <TableCell className={classes.th}>Date</TableCell>\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//             <TableRow>\r\n//               <TableCell component=\"th\" scope=\"row\">\r\n//                 {data.base}\r\n//               </TableCell>\r\n//               <TableCell>{data.date}</TableCell>\r\n//             </TableRow>\r\n//           </TableBody>\r\n//         </Table>\r\n//       </TableContainer>\r\n\r\n//       <FormGroup row style={{ margin: 10 }}>\r\n//         <FormControlLabel\r\n//           control={\r\n//             <Checkbox\r\n//               checked={state.checkedAll}\r\n//               onChange={handleChange(\"checkedAll\")}\r\n//               value=\"checkedAll\"\r\n//               color=\"primary\"\r\n//             />\r\n//           }\r\n//           label=\"Show All\"\r\n//         />\r\n//       </FormGroup>\r\n\r\n//       <TableContainer component={Paper}>\r\n//         <Table\r\n//           className={classes.table}\r\n//           size=\"small\"\r\n//           aria-label=\"Exchange Rates\"\r\n//         >\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <Hidden xsDown>\r\n//                 <TableCell className={classes.th}>Target Currency</TableCell>\r\n//               </Hidden>\r\n//               {/* <TableCell className={classes.th}>Target</TableCell> */}\r\n//               <TableCell className={classes.th} style={{ width: 20 }}>\r\n//                 Symbol\r\n//               </TableCell>\r\n//               <TableCell className={classes.th}>Name</TableCell>\r\n\r\n//               <TableCell className={classes.th} align=\"right\">\r\n//                 Rate\r\n//               </TableCell>\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//             {Object.entries(data.rates)\r\n//               .sort()\r\n//               .map(rate => {\r\n//                 const isoCode = rate[0];\r\n\r\n//                 const willShow =\r\n//                   state.checkedAll ||\r\n//                   isoCode === \"GBP\" ||\r\n//                   isoCode === \"EUR\" ||\r\n//                   isoCode === \"USD\";\r\n\r\n//                 if (!willShow) {\r\n//                   return null;\r\n//                 }\r\n\r\n//                 const currencyMetadata = CurrencyMetadata[isoCode];\r\n//                 const symbol = currencyMetadata ? currencyMetadata.symbol : \"\";\r\n//                 const name = currencyMetadata ? currencyMetadata.name : \"\";\r\n\r\n//                 return (\r\n//                   <TableRow key={rate[0]}>\r\n//                     {/* <TableCell>{rate[0]}</TableCell> */}\r\n//                     <Hidden xsDown>\r\n//                       <TableCell>{rate[0]}</TableCell>\r\n//                     </Hidden>\r\n//                     <TableCell style={{ width: 20 }}>{symbol}</TableCell>\r\n//                     <TableCell>{name}</TableCell>\r\n//                     <TableCell align=\"right\">{rate[1].toFixed(4)}</TableCell>\r\n//                   </TableRow>\r\n//                 );\r\n//               })}\r\n//           </TableBody>\r\n//         </Table>\r\n//       </TableContainer>\r\n//     </>\r\n//   );\r\n// };\r\n\r\ninterface ExchangeRatesDateRangeProps {\r\n  data: ExchangeRateDateRangeResponse;\r\n  // data: ExchangeRateHistoricalDateResponse;\r\n}\r\n\r\nconst ExchangeRatesDateRange: React.FC<ExchangeRatesDateRangeProps> = ({\r\n  data\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useState({\r\n    checkedAll: false\r\n  });\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  // const dataJson = JSON.stringify(data, null, 2);\r\n  // console.log(\"ExchangeRatesDateRange\", \"dataJson\", dataJson);\r\n\r\n  const getEndDateRateElement = (\r\n    data: ExchangeRateDateRangeResponse,\r\n    // data: ExchangeRateHistoricalDateResponse,\r\n    isoCode: string\r\n  ) => {\r\n    return (\r\n      <span>\r\n        {data.rates &&\r\n          data.rates.keys &&\r\n          data.rates.keys.length > 1 &&\r\n          data.rates[1][isoCode] &&\r\n          data.rates[1][isoCode].toFixed(4)}\r\n        {/* {data.date} */}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getDirectionElement = (\r\n    startDateRate: number,\r\n    endDateRate: number\r\n  ) => {\r\n    return (\r\n      <>\r\n        <span>\r\n          {endDateRate > startDateRate ? (\r\n            <strong>\r\n              <span style={{ color: \"green\" }}>⯅</span>\r\n            </strong>\r\n          ) : endDateRate < startDateRate ? (\r\n            <strong>\r\n              <span style={{ color: \"red\" }}>⯆</span>\r\n            </strong>\r\n          ) : null}\r\n        </span>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getMatchingEndDateRate = (\r\n    data: ExchangeRateDateRangeResponse,\r\n    isoCode: string\r\n  ) => {\r\n    console.log(\"data.end_at\", data.end_at);\r\n    console.log(\"data.rates.keys\", data.rates.keys);\r\n    console.log(\"data.rates.keys.length\", data.rates.keys && data.rates.keys.length);\r\n    console.log(\"data.rates[Object.keys(data.rates)[1]][isoCode]\", data.rates.keys && data.rates.keys.length > 1 && data.rates[Object.keys(data.rates)[1]][isoCode]);\r\n\r\n    return (\r\n      data.end_at &&\r\n      data.rates.keys &&\r\n      data.rates.keys.length > 1 &&\r\n      data.rates[Object.keys(data.rates)[1]][isoCode]\r\n    );\r\n  };\r\n\r\n  return (\r\n    data && (\r\n      <>\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            // className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"Source Currency\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className={classes.th}>Source Currency</TableCell>\r\n                <TableCell className={classes.th}>Start Date</TableCell>\r\n                <TableCell className={classes.th}>End Date</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {data.base}\r\n                </TableCell>\r\n                <TableCell>\r\n                  {data.start_at && data.start_at.toString()}\r\n                </TableCell>\r\n                <TableCell>{data.end_at && data.end_at.toString()}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <FormGroup row style={{ margin: 10 }}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={state.checkedAll}\r\n                onChange={handleChange(\"checkedAll\")}\r\n                value=\"checkedAll\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Show All\"\r\n          />\r\n        </FormGroup>\r\n\r\n        {/* Object.entries(data.rates[0]) */}\r\n\r\n        {/* <h1>data.rates[Object.keys(data.rates)[1]]</h1>\r\n        <pre>{JSON.stringify(data.rates[Object.keys(data.rates)[1]], null, 2)}</pre> */}\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"Exchange Rates\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <Hidden xsDown>\r\n                  <TableCell className={classes.th}>Target Currency</TableCell>\r\n                </Hidden>\r\n                {/* <TableCell className={classes.th}>Target</TableCell> */}\r\n                <TableCell className={classes.th} style={{ width: 20 }}>\r\n                  Symbol\r\n                </TableCell>\r\n                <TableCell className={classes.th}>Name</TableCell>\r\n\r\n                <TableCell className={classes.th} align=\"right\">\r\n                  Start Date Rate\r\n                </TableCell>\r\n\r\n                <TableCell className={classes.th} align=\"right\">\r\n                  End Date Rate\r\n                </TableCell>\r\n                <TableCell className={classes.th} align=\"center\">\r\n                  Direction\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data &&\r\n                // data.date &&\r\n                // data.date &&\r\n                data.rates &&\r\n                data.rates[Object.keys(data.rates)[0]] &&\r\n                // data.rates[data.date.toString()] &&\r\n                // Object.entries(data.rates[data.date.toString()])\r\n                Object.entries(data.rates[Object.keys(data.rates)[0]]) // Start Date\r\n                  .sort()\r\n                  .map(rate => {\r\n                    // const startDate = ra\r\n                    const isoCode = rate[0];\r\n                    const startDateRate = rate[1];\r\n                    const endDateRate = data.rates[Object.keys(data.rates)[1]][isoCode];\r\n\r\n                    const willShow =\r\n                      state.checkedAll ||\r\n                      isoCode === \"GBP\" ||\r\n                      isoCode === \"EUR\" ||\r\n                      isoCode === \"USD\";\r\n\r\n                    if (!willShow) {\r\n                      return null;\r\n                    }\r\n\r\n                    const currencyMetadata = CurrencyMetadata[isoCode];\r\n                    const symbol = currencyMetadata\r\n                      ? currencyMetadata.symbol\r\n                      : \"\";\r\n                    const name = currencyMetadata ? currencyMetadata.name : \"\";\r\n\r\n                    return (\r\n                      <TableRow key={isoCode}>\r\n                        {/* <TableCell>{rate[0]}</TableCell> */}\r\n                        <Hidden xsDown>\r\n                          <TableCell>{isoCode}</TableCell>\r\n                        </Hidden>\r\n                        <TableCell style={{ width: 20 }}>{symbol}</TableCell>\r\n                        <TableCell>{name}</TableCell>\r\n\r\n                        <TableCell align=\"right\">\r\n                          {rate[1].toFixed(4)}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {/* {getEndDateRateElement(data, isoCode)} */}\r\n                          <span>\r\n                            {endDateRate.toFixed(4)}\r\n                          </span>\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          {getDirectionElement(startDateRate, endDateRate)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\n// export interface ExchangeRateLatestResponse {\r\n//   rates: { [key: string]: number };\r\n\r\n//   base: string;\r\n//   date: Date;\r\n// }\r\n\r\nexport interface ExchangeRateDateRangeResponse {\r\n  rates: { [key: string]: { [key: string]: number } };\r\n\r\n  base: string;\r\n  start_at: Date;\r\n  end_at: Date;\r\n}\r\n\r\nexport default ExchangeRatesDateRange;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { CurrencyMetadata } from \"../models/Currencies\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    // minWidth: 650\r\n  },\r\n  th: {\r\n    fontWeight: 900\r\n  },\r\n  formControl: {\r\n    // margin: theme.spacing(1),\r\n    minWidth: 160\r\n  },\r\n  selectEmpty: {\r\n    // marginTop: theme.spacing(2),\r\n  }\r\n});\r\n\r\ninterface ExchangeRatesFormProps {\r\n  sourceCurrencyIsoCode: string;\r\n  handleSourceCurrencyChange: (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => void;\r\n}\r\n\r\nconst ExchangeRatesForm: React.FC<ExchangeRatesFormProps> = (\r\n  props: ExchangeRatesFormProps\r\n) => {\r\n  const classes = useStyles();\r\n\r\n  const [\r\n    sourceCurrencyIsoCodeNormalised,\r\n    setSourceCurrencyIsoCodeNormalised\r\n  ] = useState(props.sourceCurrencyIsoCode || \"GBP\");\r\n\r\n  const handleSourceCurrencyChangeLocal = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    setSourceCurrencyIsoCodeNormalised(event.target.value as string);\r\n    props.handleSourceCurrencyChange(event);\r\n  };\r\n\r\n  const getCurrencyItemDisplayName = (isoCode: string) => {\r\n    const currencyMetadata = CurrencyMetadata[isoCode];\r\n    const symbol = currencyMetadata ? currencyMetadata.symbol : \"\";\r\n    const name = currencyMetadata ? currencyMetadata.name : \"\";\r\n\r\n    const result = (\r\n      <span title={name}>\r\n        {isoCode} (<strong>{symbol}</strong>) {name}\r\n      </span>\r\n    );\r\n\r\n    return result;\r\n  };\r\n\r\n  const supportedCurrencyIsoCodes = Object.keys(CurrencyMetadata);\r\n  // console.log(\"ExchangeRatesForm\", \"supportedCurrencyIsoCodes\", supportedCurrencyIsoCodes);\r\n\r\n  return (\r\n    <FormGroup row style={{ margin: 10 }}>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-label\">Source Currency</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={sourceCurrencyIsoCodeNormalised}\r\n          onChange={handleSourceCurrencyChangeLocal}\r\n        >\r\n          {supportedCurrencyIsoCodes.map(isoCode => (\r\n            <MenuItem value={isoCode} key={isoCode}>\r\n              {getCurrencyItemDisplayName(isoCode)}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nexport default ExchangeRatesForm;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { ExchangeRateHistoricalDateResponse } from \"../models/Historical\";\r\nimport ExchangeRatesDateRange, { ExchangeRateDateRangeResponse } from \"./ExchangeRates\";\r\nimport ExchangeRatesForm from \"./ExchangeRatesForm\";\r\n\r\ninterface FetchExchangeRateLatestProps {\r\n    sourceCurrencyIsoCode: string;\r\n    endDateDaysAgo?: number\r\n}\r\n\r\nconst FetchExchangeRateLatest = (props: FetchExchangeRateLatestProps) => {\r\n\r\n    const getDateFromDaysAgo = (daysAgo: number) => {\r\n        const ONE_DAY = 1000 * 60 * 60 * 24;\r\n\r\n        const daysInMilliseconds = ONE_DAY * daysAgo;\r\n\r\n        const result = new Date((new Date()).valueOf() - daysInMilliseconds);\r\n\r\n        return result;\r\n    }\r\n\r\n    const [endDateDaysAgo] = useState(props.endDateDaysAgo ?? 0);\r\n\r\n    const [dateRangeData, setDateRangeData] = useState<\r\n        ExchangeRateDateRangeResponse\r\n    >({\r\n        base: \"GBP\",\r\n        rates: {},\r\n        start_at: getDateFromDaysAgo(endDateDaysAgo + 1),\r\n        end_at: getDateFromDaysAgo(endDateDaysAgo)\r\n    });\r\n\r\n    const [startDateData, setStartDateData] = useState<\r\n        // ExchangeRateDateRangeResponse\r\n        ExchangeRateHistoricalDateResponse\r\n    >({\r\n        base: \"GBP\",\r\n        rates: {},\r\n        // start_at: getDateFromDaysAgo(endDateDaysAgo + 1),\r\n        // end_at: getDateFromDaysAgo(endDateDaysAgo)\r\n        date: getDateFromDaysAgo(endDateDaysAgo),\r\n        success: true,\r\n        historical: true\r\n    });\r\n\r\n    const [endDateData, setEndDateData] = useState<\r\n        ExchangeRateHistoricalDateResponse\r\n    >({\r\n        base: \"GBP\",\r\n        rates: {},\r\n        date: getDateFromDaysAgo(endDateDaysAgo + 1),\r\n        success: true,\r\n        historical: true\r\n    });\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [\r\n        sourceCurrencyIsoCodeNormalised,\r\n        setSourceCurrencyIsoCodeNormalised\r\n    ] = useState(props.sourceCurrencyIsoCode || \"GBP\");\r\n\r\n    const handleSourceCurrencyChange = (\r\n        event: React.ChangeEvent<{ value: unknown }>\r\n    ) => {\r\n        setSourceCurrencyIsoCodeNormalised(event.target.value as string);\r\n    };\r\n\r\n    // async function fetchLatestExchangeRates() {\r\n    //     const url = `https://api.exchangeratesapi.io/latest?base=${sourceCurrencyIsoCodeNormalised}`;\r\n\r\n    //     const responseJson = await fetch(url);\r\n\r\n    //     const response: ExchangeRateLatestResponse = await responseJson.json();\r\n\r\n    //     setData(response);\r\n    //     setLoading(false);\r\n    // }\r\n\r\n    useEffect(() => {\r\n        // fetchLatestExchangeRates();\r\n        // fetchExchangeRatesDateRange();\r\n        const fetchExchangeRatesDateRange = async () => {\r\n            // console.log(\"fetchExchangeRatesDateRange\");\r\n\r\n            const startDateIso = getDateFromDaysAgo(endDateDaysAgo + 1).toISOString().split(\"T\")[0];\r\n            const endDateIso = getDateFromDaysAgo(endDateDaysAgo).toISOString().split(\"T\")[0];\r\n\r\n            // console.log(`startDateIso = ${startDateIso}`);\r\n            // console.log(`endDateIso = ${endDateIso}`);\r\n\r\n            // Start Date\r\n            // const url = `https://api.exchangeratesapi.io/history?start_at=${startDateIso}&end_at=${endDateIso}&base=${sourceCurrencyIsoCodeNormalised}`;\r\n            const urlStartDate = `https://api.exchangerate.host/${startDateIso}/?base=${sourceCurrencyIsoCodeNormalised}`;\r\n            // https://api.exchangerate.host/2020-04-04&base=GBP\r\n\r\n            const responseJsonStartDate = await fetch(urlStartDate);\r\n\r\n            // const response: ExchangeRateDateRangeResponse = await responseJson.json();\r\n            const responseStartDate: ExchangeRateHistoricalDateResponse = await responseJsonStartDate.json();\r\n\r\n            // End Date\r\n            const urlEndDate = `https://api.exchangerate.host/${endDateIso}/?base=${sourceCurrencyIsoCodeNormalised}`;\r\n            const responseJsonEndDate = await fetch(urlEndDate);\r\n            const responseEndDate: ExchangeRateHistoricalDateResponse = await responseJsonEndDate.json();\r\n\r\n            // console.log(\"fetchExchangeRatesDateRange\", \"response\", response);\r\n\r\n            // setStartDateData(responseStartDate);\r\n            // setEndDateData(responseEndDate);\r\n\r\n            let dateRangeDataTemp: ExchangeRateDateRangeResponse = {\r\n                base: sourceCurrencyIsoCodeNormalised,\r\n                start_at: responseStartDate.date,\r\n                end_at: responseEndDate.date,\r\n                rates: {\r\n                    [startDateIso]: responseStartDate.rates,\r\n                    [endDateIso]: responseEndDate.rates,\r\n                }\r\n            };\r\n\r\n            console.log(\"dateRangeDataTemp\", dateRangeDataTemp);\r\n            setDateRangeData(dateRangeDataTemp);\r\n\r\n            setLoading(false);\r\n        };\r\n\r\n        fetchExchangeRatesDateRange();\r\n\r\n    }, [sourceCurrencyIsoCodeNormalised, endDateDaysAgo]);\r\n\r\n    return (\r\n        <div>\r\n            {loading ? (\r\n                <div>Loading...</div>\r\n            ) : (\r\n                <div>\r\n                    {dateRangeData && (\r\n                        <>\r\n                            <ExchangeRatesForm\r\n                                sourceCurrencyIsoCode={sourceCurrencyIsoCodeNormalised}\r\n                                handleSourceCurrencyChange={handleSourceCurrencyChange}\r\n                            />\r\n\r\n                            <hr></hr>\r\n\r\n                            <ExchangeRatesDateRange data={dateRangeData} />\r\n                        </>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FetchExchangeRateLatest;\r\n\r\n","import React from \"react\";\nimport \"./App.css\";\nimport FetchExchangeRateLatest from \"./components/FetchExchangeRateLatest\";\n\nfunction App() {\n  return (\n    <FetchExchangeRateLatest sourceCurrencyIsoCode=\"GBP\" endDateDaysAgo={1} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}