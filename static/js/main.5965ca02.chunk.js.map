{"version":3,"sources":["models/Currencies.ts","components/ExchangeRatesForm.tsx","components/ExchangeRates.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CurrencyMetadata","GBP","isoCode","symbol","name","EUR","USD","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","ZAR","useStyles","makeStyles","root","width","overflowX","table","th","fontWeight","formControl","minWidth","selectEmpty","ExchangeRatesForm","props","classes","useState","sourceCurrencyIsoCode","sourceCurrencyIsoCodeNormalised","setSourceCurrencyIsoCodeNormalised","FormGroup","row","style","margin","FormControl","className","InputLabel","id","Select","labelId","value","onChange","event","target","handleSourceCurrencyChange","map","MenuItem","key","currencyMetadata","title","getCurrencyItemDisplayName","ExchangeRatesDateRange","data","React","checkedAll","state","setState","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","scope","base","start_at","toString","end_at","FormControlLabel","control","Checkbox","checked","color","label","Hidden","xsDown","align","rates","Object","entries","sort","rate","startDateRate","toFixed","getEndDateRateElement","getDirectionElement","FetchExchangeRateLatest","getDateFromDaysAgo","daysAgo","daysInMilliseconds","Date","valueOf","undefined","setData","endDateDaysAgo","dateRangeData","setDateRangeData","loading","setLoading","a","url","fetch","responseJson","json","response","console","log","startDateIso","toISOString","split","endDateIso","useEffect","fetchExchangeRates","fetchExchangeRatesDateRange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yeAYaA,EAAsC,CACjDC,IAAK,CAAEC,QAAS,MAAOC,OAAQ,OAAKC,KAAM,iBAC1CC,IAAK,CAAEH,QAAS,MAAOC,OAAQ,SAAKC,KAAM,QAC1CE,IAAK,CAAEJ,QAAS,MAAOC,OAAQ,IAAKC,KAAM,aAE1CG,IAAK,CAAEL,QAAS,MAAOC,OAAQ,IAAKC,KAAM,qBAC1CI,IAAK,CAAEN,QAAS,MAAOC,OAAQ,gBAAOC,KAAM,iBAC5CK,IAAK,CAAEP,QAAS,MAAOC,OAAQ,KAAMC,KAAM,kBAC3CM,IAAK,CAAER,QAAS,MAAOC,OAAQ,IAAKC,KAAM,mBAC1CO,IAAK,CAAET,QAAS,MAAOC,OAAQ,MAAOC,KAAM,eAC5CQ,IAAK,CAAEV,QAAS,MAAOC,OAAQ,OAAKC,KAAM,gBAC1CS,IAAK,CAAEX,QAAS,MAAOC,OAAQ,UAAMC,KAAM,gBAC3CU,IAAK,CAAEZ,QAAS,MAAOC,OAAQ,MAAOC,KAAM,gBAC5CW,IAAK,CAAEb,QAAS,MAAOC,OAAQ,IAAKC,KAAM,oBAC1CY,IAAK,CAAEd,QAAS,MAAOC,OAAQ,KAAMC,KAAM,iBAC3Ca,IAAK,CAAEf,QAAS,MAAOC,OAAQ,KAAMC,KAAM,oBAC3Cc,IAAK,CAAEhB,QAAS,MAAOC,OAAQ,KAAMC,KAAM,qBAC3Ce,IAAK,CAAEjB,QAAS,MAAOC,OAAQ,SAAKC,KAAM,sBAC1CgB,IAAK,CAAElB,QAAS,MAAOC,OAAQ,SAAKC,KAAM,gBAC1CiB,IAAK,CAAEnB,QAAS,MAAOC,OAAQ,KAAMC,KAAM,sBAC3CkB,IAAK,CAAEpB,QAAS,MAAOC,OAAQ,OAAKC,KAAM,gBAC1CmB,IAAK,CAAErB,QAAS,MAAOC,OAAQ,SAAKC,KAAM,oBAC1CoB,IAAK,CAAEtB,QAAS,MAAOC,OAAQ,IAAKC,KAAM,gBAE1CqB,IAAK,CAAEvB,QAAS,MAAOC,OAAQ,KAAMC,KAAM,qBAC3CsB,IAAK,CAAExB,QAAS,MAAOC,OAAQ,KAAMC,KAAM,mBAC3CuB,IAAK,CAAEzB,QAAS,MAAOC,OAAQ,IAAKC,KAAM,sBAC1CwB,IAAK,CAAE1B,QAAS,MAAOC,OAAQ,SAAKC,KAAM,mBAC1CyB,IAAK,CAAE3B,QAAS,MAAOC,OAAQ,UAAMC,KAAM,gBAC3C0B,IAAK,CAAE5B,QAAS,MAAOC,OAAQ,MAAOC,KAAM,gBAE5C2B,IAAK,CAAE7B,QAAS,MAAOC,OAAQ,SAAKC,KAAM,iBAC1C4B,IAAK,CAAE9B,QAAS,MAAOC,OAAQ,KAAMC,KAAM,iBAC3C6B,IAAK,CAAE/B,QAAS,MAAOC,OAAQ,IAAKC,KAAM,oBAE1C8B,IAAK,CAAEhC,QAAS,MAAOC,OAAQ,SAAKC,KAAM,aAC1C+B,IAAK,CAAEjC,QAAS,MAAOC,OAAQ,SAAKC,KAAM,gBAE1CgC,IAAK,CAAElC,QAAS,MAAOC,OAAQ,IAAKC,KAAM,uBCpCtCiC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OACPC,UAAW,QAEbC,MAAO,GAGPC,GAAI,CACFC,WAAY,KAEdC,YAAa,CAEXC,SAAU,KAEZC,YAAa,KAgHAC,EAnG6C,SAC1DC,GAIA,IAAMC,EAAUb,IAHb,EAOCc,mBAASF,EAAMG,uBAAyB,OAPzC,mBAKDC,EALC,KAMDC,EANC,KAsEH,OACE,oCAKE,kBAACC,EAAA,EAAD,CAAWC,KAAG,EAACC,MAAO,CAAEC,OAAQ,KAC9B,kBAACC,EAAA,EAAD,CAAaC,UAAWV,EAAQL,aAC9B,kBAACgB,EAAA,EAAD,CAAYC,GAAG,4BAAf,mBACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,2BACRF,GAAG,qBACHG,MAAOZ,EACPa,SA1E8B,SACtCC,GAEAb,EAAmCa,EAAMC,OAAOH,OAChDhB,EAAMoB,2BAA2BF,KAiBD,CAChC,MACA,MACA,MAEA,MACA,MACA,MACA,MACA,MACA,MACA,MAEA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MAEA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MAEA,MACA,MACA,MACA,MACA,OAkBmCG,KAAI,SAAApE,GAAO,OACpC,kBAACqE,EAAA,EAAD,CAAUN,MAAO/D,EAASsE,IAAKtE,GAtER,SAACA,GAClC,IAAMuE,EAAmBzE,EAAiBE,GACpCC,EAASsE,EAAmBA,EAAiBtE,OAAS,GACtDC,EAAOqE,EAAmBA,EAAiBrE,KAAO,GAQxD,OALE,0BAAMsE,MAAOtE,GACVF,EADH,KACa,gCAASC,GADtB,KACyCC,GAgE9BuE,CAA2BzE,YC7GtCmC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OACPC,UAAW,QAEbC,MAAO,GAGPC,GAAI,CACFC,WAAY,KAEdC,YAAa,CAEXC,SAAU,KAEZC,YAAa,KAoKT6B,EAAgE,SAAC,GAEhE,IAOiBxE,EARtByE,EACI,EADJA,KAEM3B,EAAUb,IADZ,EAGsByC,IAAM3B,SAAS,CACvC4B,YAAY,IAJV,mBAGGC,EAHH,KAGUC,EAHV,KAsDJ,OACEJ,GAEE,oCACE,kBAACK,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAEEC,KAAK,QACLC,aAAW,mBAEX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,IAA9B,mBACA,kBAAC+C,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,IAA9B,cACA,kBAAC+C,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,IAA9B,cAGJ,kBAACgD,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWP,UAAU,KAAKS,MAAM,OAC7Bf,EAAKgB,MAER,kBAACH,EAAA,EAAD,KACGb,EAAKiB,UAAYjB,EAAKiB,SAASC,YAElC,kBAACL,EAAA,EAAD,KAAYb,EAAKmB,QAAUnB,EAAKmB,OAAOD,gBAM/C,kBAACxC,EAAA,EAAD,CAAWC,KAAG,EAACC,MAAO,CAAEC,OAAQ,KAC9B,kBAACuC,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAASpB,EAAMD,WACfb,UAnFQ9D,EAmFe,aAnFE,SACrC+D,GAEAc,EAAS,eAAKD,EAAN,eAAc5E,EAAO+D,EAAMC,OAAOgC,aAiF9BnC,MAAM,aACNoC,MAAM,YAGVC,MAAM,cAIV,kBAACpB,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CACEzB,UAAWV,EAAQR,MACnB4C,KAAK,QACLC,aAAW,kBAEX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACc,EAAA,EAAD,CAAQC,QAAM,GACZ,kBAACd,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,IAA9B,oBAGF,kBAAC+C,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,GAAIc,MAAO,CAAEjB,MAAO,KAAlD,UAGA,kBAACkD,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,IAA9B,QAEA,kBAAC+C,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,GAAI8D,MAAM,SAAxC,mBAIA,kBAACf,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,GAAI8D,MAAM,SAAxC,iBAGA,kBAACf,EAAA,EAAD,CAAW9B,UAAWV,EAAQP,GAAI8D,MAAM,UAAxC,eAKJ,kBAACd,EAAA,EAAD,KACGd,GACCA,EAAKiB,UACLjB,EAAKmB,QACLnB,EAAK6B,MAAM7B,EAAKiB,SAASC,aACzBlB,EAAK6B,MAAM7B,EAAKmB,OAAOD,aACvBY,OAAOC,QAAQ/B,EAAK6B,MAAM7B,EAAKiB,SAASC,aACrCc,OACAvC,KAAI,SAAAwC,GACH,IAAM5G,EAAU4G,EAAK,GACfC,EAAgBD,EAAK,GAQ3B,KALE9B,EAAMD,YACM,QAAZ7E,GACY,QAAZA,GACY,QAAZA,GAGA,OAAO,KAGT,IAAMuE,EAAmBzE,EAAiBE,GACpCC,EAASsE,EACXA,EAAiBtE,OACjB,GACEC,EAAOqE,EAAmBA,EAAiBrE,KAAO,GAExD,OACE,kBAACqF,EAAA,EAAD,CAAUjB,IAAKtE,GAEb,kBAACqG,EAAA,EAAD,CAAQC,QAAM,GACZ,kBAACd,EAAA,EAAD,KAAYxF,IAEd,kBAACwF,EAAA,EAAD,CAAWjC,MAAO,CAAEjB,MAAO,KAAOrC,GAClC,kBAACuF,EAAA,EAAD,KAAYtF,GAEZ,kBAACsF,EAAA,EAAD,CAAWe,MAAM,SACdK,EAAK,GAAGE,QAAQ,IAEnB,kBAACtB,EAAA,EAAD,CAAWe,MAAM,SAzJT,SAC5B5B,EACA3E,GAEA,OACE,8BACG2E,EAAKmB,QACJnB,EAAK6B,MAAM7B,EAAKmB,OAAOD,aACvBlB,EAAK6B,MAAM7B,EAAKmB,OAAOD,YAAY7F,GAAS8G,QAAQ,IAkJnCC,CAAsBpC,EAAM3E,IAE/B,kBAACwF,EAAA,EAAD,CAAWe,MAAM,UA/IX,SAC1B5B,EACA3E,EACA6G,GAEA,OACE,8BACGlC,EAAKmB,QACJnB,EAAK6B,MAAM7B,EAAKmB,OAAOD,aACvBlB,EAAK6B,MAAM7B,EAAKmB,OAAOD,YAAY7F,IACnC2E,EAAK6B,MAAM7B,EAAKmB,OAAOD,YAAY7F,GAAW6G,EAC5C,gCACE,0BAAMtD,MAAO,CAAE4C,MAAO,UAAtB,WAEAxB,EAAKmB,QACPnB,EAAK6B,MAAM7B,EAAKmB,OAAOD,aACvBlB,EAAK6B,MAAM7B,EAAKmB,OAAOD,YAAY7F,IACnC2E,EAAK6B,MAAM7B,EAAKmB,OAAOD,YAAY7F,GAAW6G,EAC5C,gCACE,0BAAMtD,MAAO,CAAE4C,MAAO,QAAtB,WAEA,MA2HWa,CAAoBrC,EAAM3E,EAAS6G,aA6M/CI,EAxKiB,SAAClE,GAAyC,IAAD,EAEjEmE,EAAqB,SAACC,GAC1B,IAEMC,EAFU,MAEqBD,EAIrC,OAFe,IAAIE,MAAM,IAAIA,MAAQC,UAAYF,IAPoB,EAY/CnE,wBACtBsE,GAbqE,mBAYhE5C,EAZgE,KAY1D6C,EAZ0D,OAgB3BvE,mBAAQ,UAACF,EAAM0E,sBAAP,QAAyB,GAhBN,mBAgBhEA,EAhBgE,aAsB7BxE,mBAExC,CACA0C,KAAM,MACNa,MAAO,GAGPZ,SAAUsB,EAAmBO,EAAiB,GAC9C3B,OAAQoB,EAAmBO,MA9B0C,mBAsBhEC,EAtBgE,KAsBjDC,EAtBiD,OAiCzC1E,oBAAS,GAjCgC,mBAiChE2E,EAjCgE,KAiCvDC,EAjCuD,OAsCnE5E,mBAASF,EAAMG,uBAAyB,OAtC2B,mBAoCrEC,EApCqE,KAqCrEC,EArCqE,iDAgDvE,gCAAA0E,EAAA,6DACQC,EADR,sDAC6D5E,GAD7D,SAG6B6E,MAAMD,GAHnC,cAGQE,EAHR,gBAKqDA,EAAaC,OALlE,OAKQC,EALR,OAOEX,EAAQW,GACRN,GAAW,GARb,4CAhDuE,kEAwFvE,oCAAAC,EAAA,6DACsB,IAAIT,KAGxBe,QAAQC,IAAI,+BAMNC,EAAepB,EAAmBO,EAAiB,GAAGc,cAAcC,MAAM,KAAK,GAC/EC,EAAavB,EAAmBO,GAAgBc,cAAcC,MAAM,KAAK,GAE/EJ,QAAQC,IAAR,yBAA8BC,IAC9BF,QAAQC,IAAR,uBAA4BI,IAEtBV,EAhBR,2DAgBkEO,EAhBlE,mBAgByFG,EAhBzF,iBAgB4GtF,GAhB5G,SAoB6B6E,MAAMD,GApBnC,cAoBQE,EApBR,iBAsBwDA,EAAaC,OAtBrE,QAsBQC,EAtBR,OAwBEC,QAAQC,IAAIF,GAEZR,EAAiBQ,GACjBN,GAAW,GA3Bb,6CAxFuE,sBA4HvE,OANAa,qBAAU,YAtH6D,mCAuHrEC,GAvHqE,mCAyHrEC,KACC,CAACzF,IAGF,6BACGyE,EACC,2CAEE,6BACGjD,GACC,oCACE,kBAAC,EAAD,CACEzB,sBAAuBC,EACvBgB,2BA9FmB,SACjCF,GAGAb,EAAmCa,EAAMC,OAAOH,UA8FpC,6BAEA,kBAAC,EAAD,CAAwBY,KAAM+C,QC3gB/BmB,MAxBf,WACE,OAiBE,oCACE,kBAAC,EAAD,CAAyB3F,sBAAsB,MAAMuE,eAAgB,MCZvDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.5965ca02.chunk.js","sourcesContent":["// import { ExecFileSyncOptionsWithBufferEncoding } from \"child_process\";\r\n\r\nexport interface CurrencyInfo {\r\n  isoCode: string;\r\n  symbol: string;\r\n  name: string;\r\n}\r\n\r\nexport interface CurrencyInfoItems {\r\n  [key: string]: CurrencyInfo;\r\n}\r\n\r\nexport const CurrencyMetadata: CurrencyInfoItems = {\r\n  GBP: { isoCode: \"GBP\", symbol: \"£\", name: \"British Pound\" },\r\n  EUR: { isoCode: \"EUR\", symbol: \"€\", name: \"Euro\" },\r\n  USD: { isoCode: \"USD\", symbol: \"$\", name: \"US Dollar\" },\r\n\r\n  AUD: { isoCode: \"AUD\", symbol: \"$\", name: \"Australian Dollar\" },\r\n  BGN: { isoCode: \"BGN\", symbol: \"лв.\", name: \"Bulgarian Lev\" },\r\n  BRL: { isoCode: \"BRL\", symbol: \"R$\", name: \"Brazilian Real\" },\r\n  CAD: { isoCode: \"CAD\", symbol: \"$\", name: \"Canadian Dollar\" },\r\n  CHF: { isoCode: \"CHF\", symbol: \"CHF\", name: \"Swiss Franc\" },\r\n  CNY: { isoCode: \"CNY\", symbol: \"¥\", name: \"Chinese Yuan\" },\r\n  CZK: { isoCode: \"CZK\", symbol: \"Kč\", name: \"Czech Koruna\" },\r\n  DKK: { isoCode: \"DKK\", symbol: \"kr.\", name: \"Danish Krone\" },\r\n  HKD: { isoCode: \"HKD\", symbol: \"$\", name: \"Hong Kong Dollar\" },\r\n  HRK: { isoCode: \"HRK\", symbol: \"kn\", name: \"Croatian Kuna\" },\r\n  HUF: { isoCode: \"HUF\", symbol: \"Ft\", name: \"Hungarian Forint\" },\r\n  IDR: { isoCode: \"IDR\", symbol: \"Rp\", name: \"Indonesian Rupiah\" },\r\n  ILS: { isoCode: \"ILS\", symbol: \"₪\", name: \"Israeli New Shekel\" },\r\n  INR: { isoCode: \"INR\", symbol: \"₹\", name: \"Indian Rupee\" },\r\n  ISK: { isoCode: \"ISK\", symbol: \"kr\", name: \"Icelandic Króna\" },\r\n  JPY: { isoCode: \"JPY\", symbol: \"¥\", name: \"Japanese Yen\" },\r\n  KRW: { isoCode: \"KRW\", symbol: \"₩\", name: \"South Korean Won\" },\r\n  MXN: { isoCode: \"MXN\", symbol: \"$\", name: \"Mexican Peso\" },\r\n\r\n  MYR: { isoCode: \"MYR\", symbol: \"RM\", name: \"Malaysian Ringgit\" },\r\n  NOK: { isoCode: \"NOK\", symbol: \"kr\", name: \"Norwegian Krone\" },\r\n  NZD: { isoCode: \"NZD\", symbol: \"$\", name: \"New Zealand Dollar\" },\r\n  PHP: { isoCode: \"PHP\", symbol: \"₱\", name: \"Philippine Piso\" },\r\n  PLN: { isoCode: \"PLN\", symbol: \"zł\", name: \"Polish Zloty\" },\r\n  RON: { isoCode: \"RON\", symbol: \"lei\", name: \"Romanian Leu\" },\r\n\r\n  RUB: { isoCode: \"RUB\", symbol: \"₽\", name: \"Russian Ruble\" },\r\n  SEK: { isoCode: \"SEK\", symbol: \"kr\", name: \"Swedish Krona\" },\r\n  SGD: { isoCode: \"SGD\", symbol: \"$\", name: \"Singapore Dollar\" },\r\n\r\n  THB: { isoCode: \"THB\", symbol: \"฿\", name: \"Thai Baht\" },\r\n  TRY: { isoCode: \"TRY\", symbol: \"₺\", name: \"Turkish Lira\" },\r\n\r\n  ZAR: { isoCode: \"ZAR\", symbol: \"R\", name: \"South African Rand\" }\r\n};\r\n","import React, { useState /*, useEffect */ } from \"react\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  //   FormControlLabel,\r\n  //   Checkbox,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { CurrencyMetadata } from \"../models/Currencies\";\r\n// import classes from \"*.module.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    // minWidth: 650\r\n  },\r\n  th: {\r\n    fontWeight: 900\r\n  },\r\n  formControl: {\r\n    // margin: theme.spacing(1),\r\n    minWidth: 160\r\n  },\r\n  selectEmpty: {\r\n    // marginTop: theme.spacing(2),\r\n  }\r\n});\r\n\r\ninterface ExchangeRatesFormProps {\r\n  sourceCurrencyIsoCode: string;\r\n\r\n  handleSourceCurrencyChange: (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => void;\r\n}\r\n\r\nconst ExchangeRatesForm: React.FC<ExchangeRatesFormProps> = (\r\n  props: ExchangeRatesFormProps\r\n) => {\r\n  // console.log(\"ExchangeRatesForm.props\", props);\r\n\r\n  const classes = useStyles();\r\n  const [\r\n    sourceCurrencyIsoCodeNormalised,\r\n    setSourceCurrencyIsoCodeNormalised\r\n  ] = useState(props.sourceCurrencyIsoCode || \"GBP\");\r\n\r\n  const handleSourceCurrencyChangeLocal = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    setSourceCurrencyIsoCodeNormalised(event.target.value as string);\r\n    props.handleSourceCurrencyChange(event);\r\n  };\r\n\r\n  const getCurrencyItemDisplayName = (isoCode: string) => {\r\n    const currencyMetadata = CurrencyMetadata[isoCode];\r\n    const symbol = currencyMetadata ? currencyMetadata.symbol : \"\";\r\n    const name = currencyMetadata ? currencyMetadata.name : \"\";\r\n\r\n    const result = (\r\n      <span title={name}>\r\n        {isoCode} (<strong>{symbol}</strong>) {name}\r\n      </span>\r\n    );\r\n\r\n    return result;\r\n  };\r\n\r\n  const supportedCurrencyIsoCodes = [\r\n    \"GBP\",\r\n    \"EUR\",\r\n    \"USD\",\r\n\r\n    \"AUD\",\r\n    \"BGN\",\r\n    \"BRL\",\r\n    \"CAD\",\r\n    \"CHF\",\r\n    \"CNY\",\r\n    \"CZK\",\r\n\r\n    \"DKK\",\r\n    \"HKD\",\r\n    \"HRK\",\r\n    \"HUF\",\r\n    \"IDR\",\r\n    \"ILS\",\r\n    \"INR\",\r\n    \"ISK\",\r\n\r\n    \"JPY\",\r\n    \"KRW\",\r\n    \"MXN\",\r\n    \"MYR\",\r\n    \"NOK\",\r\n    \"NZD\",\r\n    \"PHP\",\r\n    \"PLN\",\r\n    \"RON\",\r\n    \"RUB\",\r\n\r\n    \"SEK\",\r\n    \"SGD\",\r\n    \"THB\",\r\n    \"TRY\",\r\n    \"ZAR\"\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>\r\n        ExchangeRatesForm.sourceCurrencyIsoCodeNormalised = [\r\n        {sourceCurrencyIsoCodeNormalised}]\r\n      </h1> */}\r\n      <FormGroup row style={{ margin: 10 }}>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Source Currency</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={sourceCurrencyIsoCodeNormalised}\r\n            onChange={handleSourceCurrencyChangeLocal}\r\n          >\r\n            {supportedCurrencyIsoCodes.map(isoCode => (\r\n              <MenuItem value={isoCode} key={isoCode}>\r\n                {getCurrencyItemDisplayName(isoCode)}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </FormGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExchangeRatesForm;\r\n","import React, { useState, useEffect } from \"react\";\r\n// import { useTheme /*, Theme, createStyles */ } from \"@material-ui/core/styles\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\n// import withWidth, { WithWidth } from \"@material-ui/core/withWidth\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport ExchangeRatesForm from \"./ExchangeRatesForm\";\r\nimport { CurrencyMetadata } from \"../models/Currencies\";\r\nimport { green } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    // minWidth: 650\r\n  },\r\n  th: {\r\n    fontWeight: 900\r\n  },\r\n  formControl: {\r\n    // margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    // marginTop: theme.spacing(2),\r\n  }\r\n});\r\n\r\n// const useStyles = makeStyles((theme: Theme) =>\r\n//   createStyles({\r\n//     root: {\r\n//       flexGrow: 1,\r\n//     },\r\n//     container: {\r\n//       display: 'flex',\r\n//       flexWrap: 'wrap',\r\n//     },\r\n//     paper: {\r\n//       padding: theme.spacing(2),\r\n//       textAlign: 'center',\r\n//       color: theme.palette.text.secondary,\r\n//       flex: '1 0 auto',\r\n//       margin: theme.spacing(1),\r\n//     },\r\n//   }),\r\n// );\r\n\r\ninterface ExchangeRatesProps {\r\n  data: ExchangeRateLatestResponse;\r\n}\r\n\r\nconst ExchangeRates: React.FC<ExchangeRatesProps> = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  // const theme = useTheme();\r\n  // const breakpoints = theme.breakpoints;\r\n\r\n  // console.log(\"breakpoints\", breakpoints);\r\n\r\n  const [state, setState] = React.useState({\r\n    checkedAll: false\r\n    // checkedB: true,\r\n    // checkedF: true,\r\n    // checkedG: true,\r\n  });\r\n\r\n  // const [\r\n  //   sourceCourrencyIsoCodeNormalised,\r\n  //   setSourceCourrencyIsoCodeNormalised\r\n  // ] = useState(data.base || \"GBP\");\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  // const handleSourceCurrencyChange = (\r\n  //   event: React.ChangeEvent<{ value: unknown }>\r\n  // ) => {\r\n  //   setSourceCourrencyIsoCodeNormalised(event.target.value as string);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"Source Currency\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.th}>Source Currency</TableCell>\r\n              <TableCell className={classes.th}>Date</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {data.base}\r\n              </TableCell>\r\n              <TableCell>{data.date}</TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <FormGroup row style={{ margin: 10 }}>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={state.checkedAll}\r\n              onChange={handleChange(\"checkedAll\")}\r\n              value=\"checkedAll\"\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label=\"Show All\"\r\n        />\r\n      </FormGroup>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"Exchange Rates\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <Hidden xsDown>\r\n                <TableCell className={classes.th}>Target Currency</TableCell>\r\n              </Hidden>\r\n              {/* <TableCell className={classes.th}>Target</TableCell> */}\r\n              <TableCell className={classes.th} style={{ width: 20 }}>\r\n                Symbol\r\n              </TableCell>\r\n              <TableCell className={classes.th}>Name</TableCell>\r\n\r\n              <TableCell className={classes.th} align=\"right\">\r\n                Rate\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {Object.entries(data.rates)\r\n              .sort()\r\n              .map(rate => {\r\n                const isoCode = rate[0];\r\n\r\n                const willShow =\r\n                  state.checkedAll ||\r\n                  isoCode === \"GBP\" ||\r\n                  isoCode === \"EUR\" ||\r\n                  isoCode === \"USD\";\r\n\r\n                if (!willShow) {\r\n                  return null;\r\n                }\r\n\r\n                const currencyMetadata = CurrencyMetadata[isoCode];\r\n                const symbol = currencyMetadata ? currencyMetadata.symbol : \"\";\r\n                const name = currencyMetadata ? currencyMetadata.name : \"\";\r\n\r\n                return (\r\n                  <TableRow key={rate[0]}>\r\n                    {/* <TableCell>{rate[0]}</TableCell> */}\r\n                    <Hidden xsDown>\r\n                      <TableCell>{rate[0]}</TableCell>\r\n                    </Hidden>\r\n                    <TableCell style={{ width: 20 }}>{symbol}</TableCell>\r\n                    <TableCell>{name}</TableCell>\r\n                    <TableCell align=\"right\">{rate[1].toFixed(4)}</TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface ExchangeRatesDateRangeProps {\r\n  data: ExchangeRateDateRangeResponse;\r\n}\r\n\r\nconst ExchangeRatesDateRange: React.FC<ExchangeRatesDateRangeProps> = ({\r\n  data\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useState({\r\n    checkedAll: false\r\n  });\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  // const json = JSON.stringify(data, null, 2);\r\n\r\n  const getEndDateRateElement = (\r\n    data: ExchangeRateDateRangeResponse,\r\n    isoCode: string\r\n  ) => {\r\n    return (\r\n      <span>\r\n        {data.end_at &&\r\n          data.rates[data.end_at.toString()] &&\r\n          data.rates[data.end_at.toString()][isoCode].toFixed(4)}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const getDirectionElement = (\r\n    data: ExchangeRateDateRangeResponse,\r\n    isoCode: string,\r\n    startDateRate: number\r\n  ) => {\r\n    return (\r\n      <span>\r\n        {data.end_at &&\r\n          data.rates[data.end_at.toString()] &&\r\n          data.rates[data.end_at.toString()][isoCode] &&\r\n          data.rates[data.end_at.toString()][isoCode] > startDateRate ? (\r\n            <strong>\r\n              <span style={{ color: \"green\" }}>⯅</span>\r\n            </strong>\r\n          ) : data.end_at &&\r\n            data.rates[data.end_at.toString()] &&\r\n            data.rates[data.end_at.toString()][isoCode] &&\r\n            data.rates[data.end_at.toString()][isoCode] < startDateRate ? (\r\n              <strong>\r\n                <span style={{ color: \"red\" }}>⯆</span>\r\n              </strong>\r\n            ) : null}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    data && (\r\n      // <pre>{json}</pre>\r\n      <>\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            // className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"Source Currency\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell className={classes.th}>Source Currency</TableCell>\r\n                <TableCell className={classes.th}>Start Date</TableCell>\r\n                <TableCell className={classes.th}>End Date</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {data.base}\r\n                </TableCell>\r\n                <TableCell>\r\n                  {data.start_at && data.start_at.toString()}\r\n                </TableCell>\r\n                <TableCell>{data.end_at && data.end_at.toString()}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <FormGroup row style={{ margin: 10 }}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={state.checkedAll}\r\n                onChange={handleChange(\"checkedAll\")}\r\n                value=\"checkedAll\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Show All\"\r\n          />\r\n        </FormGroup>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"Exchange Rates\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <Hidden xsDown>\r\n                  <TableCell className={classes.th}>Target Currency</TableCell>\r\n                </Hidden>\r\n                {/* <TableCell className={classes.th}>Target</TableCell> */}\r\n                <TableCell className={classes.th} style={{ width: 20 }}>\r\n                  Symbol\r\n                </TableCell>\r\n                <TableCell className={classes.th}>Name</TableCell>\r\n\r\n                <TableCell className={classes.th} align=\"right\">\r\n                  Start Date Rate\r\n                </TableCell>\r\n\r\n                <TableCell className={classes.th} align=\"right\">\r\n                  End Date Rate\r\n                </TableCell>\r\n                <TableCell className={classes.th} align=\"center\">\r\n                  Direction\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data &&\r\n                data.start_at &&\r\n                data.end_at &&\r\n                data.rates[data.start_at.toString()] &&\r\n                data.rates[data.end_at.toString()] &&\r\n                Object.entries(data.rates[data.start_at.toString()])\r\n                  .sort()\r\n                  .map(rate => {\r\n                    const isoCode = rate[0];\r\n                    const startDateRate = rate[1];\r\n\r\n                    const willShow =\r\n                      state.checkedAll ||\r\n                      isoCode === \"GBP\" ||\r\n                      isoCode === \"EUR\" ||\r\n                      isoCode === \"USD\";\r\n\r\n                    if (!willShow) {\r\n                      return null;\r\n                    }\r\n\r\n                    const currencyMetadata = CurrencyMetadata[isoCode];\r\n                    const symbol = currencyMetadata\r\n                      ? currencyMetadata.symbol\r\n                      : \"\";\r\n                    const name = currencyMetadata ? currencyMetadata.name : \"\";\r\n\r\n                    return (\r\n                      <TableRow key={isoCode}>\r\n                        {/* <TableCell>{rate[0]}</TableCell> */}\r\n                        <Hidden xsDown>\r\n                          <TableCell>{isoCode}</TableCell>\r\n                        </Hidden>\r\n                        <TableCell style={{ width: 20 }}>{symbol}</TableCell>\r\n                        <TableCell>{name}</TableCell>\r\n\r\n                        <TableCell align=\"right\">\r\n                          {rate[1].toFixed(4)}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\">\r\n                          {getEndDateRateElement(data, isoCode)}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          {getDirectionElement(data, isoCode, startDateRate)}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        {/* <h1>\r\n          {data.start_at && (\r\n            <span>Start At: {data.start_at.toString() || \"\"}</span>\r\n          )}\r\n        </h1>\r\n        <pre>\r\n          {data.start_at &&\r\n            JSON.stringify(data.rates[data.start_at.toString()], null, 2)}\r\n        </pre>\r\n\r\n        <h1>\r\n          {data.end_at && <span>End At: {data.end_at.toString() || \"\"}</span>}\r\n        </h1>\r\n\r\n        <pre>\r\n          {data.end_at &&\r\n            JSON.stringify(data.rates[data.end_at.toString()], null, 2)}\r\n        </pre> */}\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\ninterface FetchExchangeRateLatestProps {\r\n  sourceCurrencyIsoCode: string;\r\n  endDateDaysAgo?: number\r\n}\r\n\r\nconst FetchExchangeRateLatest = (props: FetchExchangeRateLatestProps) => {\r\n\r\n  const getDateFromDaysAgo = (daysAgo: number) => {\r\n    const ONE_DAY = 1000 * 60 * 60 * 24;\r\n\r\n    const daysInMilliseconds = ONE_DAY * daysAgo;\r\n\r\n    const result = new Date((new Date()).valueOf() - daysInMilliseconds);\r\n\r\n    return result;\r\n  }\r\n\r\n  const [data, setData] = useState<ExchangeRateLatestResponse | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const [endDateDaysAgo, setEndDateDaysAgo] = useState(props.endDateDaysAgo ?? 0);\r\n\r\n  // const [previousData, setPreviousData] = useState<\r\n  //   ExchangeRateLatestResponse | undefined\r\n  // >(undefined);\r\n\r\n  const [dateRangeData, setDateRangeData] = useState<\r\n    ExchangeRateDateRangeResponse\r\n  >({\r\n    base: \"GBP\",\r\n    rates: {},\r\n    // start_at: new Date(\"2020-03-16\"),\r\n    // end_at: new Date(\"2020-03-17\")\r\n    start_at: getDateFromDaysAgo(endDateDaysAgo + 1),\r\n    end_at: getDateFromDaysAgo(endDateDaysAgo)\r\n  });\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [\r\n    sourceCurrencyIsoCodeNormalised,\r\n    setSourceCurrencyIsoCodeNormalised\r\n  ] = useState(props.sourceCurrencyIsoCode || \"GBP\");\r\n\r\n  const handleSourceCurrencyChange = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    // console.log(\"ExchangeRate: handleSourceCurrencyChange : START\");\r\n    setSourceCurrencyIsoCodeNormalised(event.target.value as string);\r\n    // console.log(\"ExchangeRate: handleSourceCurrencyChange : END\");\r\n  };\r\n\r\n  async function fetchExchangeRates() {\r\n    const url = `https://api.exchangeratesapi.io/latest?base=${sourceCurrencyIsoCodeNormalised}`;\r\n\r\n    const responseJson = await fetch(url);\r\n\r\n    const response: ExchangeRateLatestResponse = await responseJson.json();\r\n\r\n    setData(response);\r\n    setLoading(false);\r\n  }\r\n\r\n  // https://api.exchangeratesapi.io/2020-03-16?base=GBP\r\n\r\n  // async function fetchPreviousExchangeRates() {\r\n  //   const currentDate = new Date();\r\n  //   const currentDateIso = currentDate.toISOString();\r\n\r\n  //   console.log(\"fetchPreviousExchangeRates\");\r\n\r\n  //   // console.log(currentDateIso);\r\n\r\n  //   // const datePrevious: string;\r\n  //   const dateIso = \"2020-03-16\";\r\n\r\n  //   console.log(dateIso);\r\n\r\n  //   const url = `https://api.exchangeratesapi.io/${dateIso}?base=${sourceCurrencyIsoCodeNormalised}`;\r\n\r\n  //   const responseJson = await fetch(url);\r\n\r\n  //   const response: ExchangeRateLatestResponse = await responseJson.json();\r\n\r\n  //   console.log(currentDateIso);\r\n\r\n  //   setPreviousData(response);\r\n  //   setLoading(false);\r\n  // }\r\n\r\n  // ExchangeRateDateRangeResponse\r\n\r\n  async function fetchExchangeRatesDateRange() {\r\n    const currentDate = new Date();\r\n    // const currentDateIso = currentDate.toISOString();\r\n\r\n    console.log(\"fetchExchangeRatesDateRange\");\r\n\r\n    // console.log(currentDateIso);\r\n\r\n    // const datePrevious: string;\r\n    // const endDateDaysAgo = 2;\r\n    const startDateIso = getDateFromDaysAgo(endDateDaysAgo + 1).toISOString().split(\"T\")[0];\r\n    const endDateIso = getDateFromDaysAgo(endDateDaysAgo).toISOString().split(\"T\")[0];\r\n\r\n    console.log(`startDateIso = ${startDateIso}`);\r\n    console.log(`endDateIso = ${endDateIso}`);\r\n\r\n    const url = `https://api.exchangeratesapi.io/history?start_at=${startDateIso}&end_at=${endDateIso}&base=${sourceCurrencyIsoCodeNormalised}`;\r\n\r\n    // https://api.exchangeratesapi.io/history?start_at=2020-03-16&end_at=2020-03-17&base=GBP\r\n\r\n    const responseJson = await fetch(url);\r\n\r\n    const response: ExchangeRateDateRangeResponse = await responseJson.json();\r\n\r\n    console.log(response);\r\n\r\n    setDateRangeData(response);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchExchangeRates();\r\n    // fetchPreviousExchangeRates();\r\n    fetchExchangeRatesDateRange();\r\n  }, [sourceCurrencyIsoCodeNormalised]);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <div>...loading</div>\r\n      ) : (\r\n          <div>\r\n            {data && (\r\n              <>\r\n                <ExchangeRatesForm\r\n                  sourceCurrencyIsoCode={sourceCurrencyIsoCodeNormalised}\r\n                  handleSourceCurrencyChange={handleSourceCurrencyChange}\r\n                />\r\n                {/* <ExchangeRates data={data} /> */}\r\n\r\n                <hr></hr>\r\n\r\n                <ExchangeRatesDateRange data={dateRangeData} />\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface ExchangeRateLatestResponse {\r\n  rates: { [key: string]: number };\r\n\r\n  base: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface ExchangeRateMap {\r\n  rates: { [key: string]: number };\r\n}\r\n\r\nexport interface ExchangeRateDateRangeResponse {\r\n  rates: { [key: string]: { [key: string]: number } };\r\n\r\n  base: string;\r\n  start_at: Date;\r\n  end_at: Date;\r\n}\r\n\r\nexport default FetchExchangeRateLatest;\r\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FetchExchangeRateLatest from \"./components/ExchangeRates\";\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload!!!\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <>\n      <FetchExchangeRateLatest sourceCurrencyIsoCode=\"GBP\" endDateDaysAgo={1} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}