{"version":3,"sources":["components/ExchangeRatesForm.tsx","components/ExchangeRates.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","overflowX","table","th","fontWeight","formControl","minWidth","selectEmpty","ExchangeRatesForm","props","console","log","classes","useState","sourceCurrencyIsoCode","sourceCurrencyIsoCodeNormalised","setSourceCurrencyIsoCodeNormalised","FormGroup","row","style","margin","FormControl","className","InputLabel","id","Select","labelId","value","onChange","event","target","handleSourceCurrencyChange","MenuItem","ExchangeRates","name","data","React","checkedAll","state","setState","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","scope","base","date","FormControlLabel","control","Checkbox","checked","color","label","align","Object","entries","rates","sort","map","rate","isoCode","key","toFixed","FetchExchangeRateLatest","undefined","setData","loading","setLoading","a","url","fetch","responseJson","json","response","useEffect","fetchExchangeRates","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbb1fc39.chunk.js","sourcesContent":["import React, { useState /*, useEffect */ } from \"react\";\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  //   FormControlLabel,\r\n  //   Checkbox,\r\n  InputLabel\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import classes from \"*.module.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    // minWidth: 650\r\n  },\r\n  th: {\r\n    fontWeight: 900\r\n  },\r\n  formControl: {\r\n    // margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    // marginTop: theme.spacing(2),\r\n  }\r\n});\r\n\r\ninterface ExchangeRatesFormProps {\r\n  sourceCurrencyIsoCode: string;\r\n\r\n  handleSourceCurrencyChange: (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => void;\r\n}\r\n\r\nconst ExchangeRatesForm: React.FC<ExchangeRatesFormProps> = (\r\n  props: ExchangeRatesFormProps\r\n) => {\r\n  console.log(\"ExchangeRatesForm.props\", props);\r\n\r\n  const classes = useStyles();\r\n  const [\r\n    sourceCurrencyIsoCodeNormalised,\r\n    setSourceCurrencyIsoCodeNormalised\r\n  ] = useState(props.sourceCurrencyIsoCode || \"GBP\");\r\n\r\n  // setSourceCurrencyIsoCodeNormalised(props.sourceCurrencyIsoCode || \"GBP\");\r\n  const handleSourceCurrencyChangeLocal = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    setSourceCurrencyIsoCodeNormalised(event.target.value as string);\r\n    props.handleSourceCurrencyChange(event);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>\r\n        ExchangeRatesForm.sourceCurrencyIsoCodeNormalised = [\r\n        {sourceCurrencyIsoCodeNormalised}]\r\n      </h1> */}\r\n      <FormGroup row style={{ margin: 10 }}>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Source</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={sourceCurrencyIsoCodeNormalised}\r\n            onChange={handleSourceCurrencyChangeLocal}\r\n          >\r\n            <MenuItem value={\"GBP\"}>GBP</MenuItem>\r\n            <MenuItem value={\"EUR\"}>EUR</MenuItem>\r\n            <MenuItem value={\"USD\"}>USD</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </FormGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExchangeRatesForm;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox /*, { CheckboxProps } */ from \"@material-ui/core/Checkbox\";\r\n// import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n// import Favorite from '@material-ui/icons/Favorite';\r\n// import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\n// import InputLabel from \"@material-ui/core/InputLabel\";\r\n// import MenuItem from \"@material-ui/core/MenuItem\";\r\n// import FormHelperText from \"@material-ui/core/FormHelperText\";\r\n// import FormControl from \"@material-ui/core/FormControl\";\r\n// import Select from \"@material-ui/core/Select\";\r\nimport ExchangeRatesForm from \"./ExchangeRatesForm\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    // minWidth: 650\r\n  },\r\n  th: {\r\n    fontWeight: 900\r\n  },\r\n  formControl: {\r\n    // margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    // marginTop: theme.spacing(2),\r\n  }\r\n});\r\n\r\ninterface ExchangeRatesProps {\r\n  data: ExchangeRateLatestResponse;\r\n}\r\n\r\nconst ExchangeRates: React.FC<ExchangeRatesProps> = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  const [state, setState] = React.useState({\r\n    checkedAll: false\r\n    // checkedB: true,\r\n    // checkedF: true,\r\n    // checkedG: true,\r\n  });\r\n\r\n  // const [\r\n  //   sourceCourrencyIsoCodeNormalised,\r\n  //   setSourceCourrencyIsoCodeNormalised\r\n  // ] = useState(data.base || \"GBP\");\r\n\r\n  const handleChange = (name: string) => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n\r\n  // const handleSourceCurrencyChange = (\r\n  //   event: React.ChangeEvent<{ value: unknown }>\r\n  // ) => {\r\n  //   setSourceCourrencyIsoCodeNormalised(event.target.value as string);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"Source Currency\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.th}>Source Currency</TableCell>\r\n              <TableCell className={classes.th}>Date</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {data.base}\r\n              </TableCell>\r\n              <TableCell>{data.date}</TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n\r\n      <FormGroup row style={{ margin: 10 }}>\r\n        {/* <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Source Currency</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={sourceCourrencyIsoCodeNormalised}\r\n            onChange={handleSourceCurrencyChange}\r\n          >\r\n            <MenuItem value={\"GBP\"}>GBP</MenuItem>\r\n            <MenuItem value={\"EUR\"}>EUR</MenuItem>\r\n            <MenuItem value={\"USD\"}>USD</MenuItem>\r\n          </Select>\r\n        </FormControl> */}\r\n        {/* <FormControlLabel\r\n        control={\r\n          <Checkbox checked={state.checkedA} onChange={handleChange('checkedA')} value=\"checkedA\" />\r\n        }\r\n        label=\"Secondary\"\r\n      /> */}\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={state.checkedAll}\r\n              onChange={handleChange(\"checkedAll\")}\r\n              value=\"checkedAll\"\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label=\"Show All\"\r\n        />\r\n        {/* <FormControlLabel control={<Checkbox value=\"checkedC\" />} label=\"Uncontrolled\" />\r\n      <FormControlLabel disabled control={<Checkbox value=\"checkedD\" />} label=\"Disabled\" />\r\n      <FormControlLabel disabled control={<Checkbox checked value=\"checkedE\" />} label=\"Disabled\" />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={state.checkedF}\r\n            onChange={handleChange('checkedF')}\r\n            value=\"checkedF\"\r\n            indeterminate\r\n          />\r\n        }\r\n        label=\"Indeterminate\"\r\n      /> */}\r\n\r\n        {/* <FormControlLabel\r\n        control={\r\n          <GreenCheckbox\r\n            checked={state.checkedG}\r\n            onChange={handleChange('checkedG')}\r\n            value=\"checkedG\"\r\n          />\r\n        }\r\n        label=\"Custom color\"\r\n      />\r\n      <FormControlLabel\r\n        control={<Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} value=\"checkedH\" />}\r\n        label=\"Custom icon\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n            checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n            value=\"checkedI\"\r\n          />\r\n        }\r\n        label=\"Custom size\"\r\n      /> */}\r\n      </FormGroup>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"Exchange Rates\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.th}>Target Currency</TableCell>\r\n              <TableCell className={classes.th} align=\"right\">\r\n                Rate\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {Object.entries(data.rates)\r\n              .sort()\r\n              .map(rate => {\r\n                const isoCode = rate[0];\r\n\r\n                const willShow =\r\n                  state.checkedAll ||\r\n                  isoCode === \"GBP\" ||\r\n                  isoCode === \"EUR\" ||\r\n                  isoCode === \"USD\";\r\n\r\n                if (!willShow) {\r\n                  return null;\r\n                }\r\n\r\n                return (\r\n                  <TableRow key={rate[0]}>\r\n                    <TableCell>{rate[0]}</TableCell>\r\n                    <TableCell align=\"right\">{rate[1].toFixed(2)}</TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface FetchExchangeRateLatestProps {\r\n  sourceCurrencyIsoCode: string;\r\n}\r\n\r\nconst FetchExchangeRateLatest = (props: FetchExchangeRateLatestProps) => {\r\n  const [data, setData] = useState<ExchangeRateLatestResponse | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [\r\n    sourceCurrencyIsoCodeNormalised,\r\n    setSourceCurrencyIsoCodeNormalised\r\n  ] = useState(props.sourceCurrencyIsoCode || \"GBP\");\r\n\r\n  const handleSourceCurrencyChange = (\r\n    event: React.ChangeEvent<{ value: unknown }>\r\n  ) => {\r\n    console.log(\"ExchangeRate: handleSourceCurrencyChange : START\");\r\n    setSourceCurrencyIsoCodeNormalised(event.target.value as string);\r\n    console.log(\"ExchangeRate: handleSourceCurrencyChange : END\");\r\n  };\r\n\r\n  async function fetchExchangeRates() {\r\n    const url = `https://api.exchangeratesapi.io/latest?base=${sourceCurrencyIsoCodeNormalised}`;\r\n\r\n    const responseJson = await fetch(url);\r\n\r\n    const response: ExchangeRateLatestResponse = await responseJson.json();\r\n\r\n    setData(response);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchExchangeRates();\r\n  }, [sourceCurrencyIsoCodeNormalised]);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <div>...loading</div>\r\n      ) : (\r\n        <div>\r\n          {data && (\r\n            <>\r\n              {/* <h1>\r\n                ExchangeRates.sourceCurrencyIsoCodeNormalised = [\r\n                {sourceCurrencyIsoCodeNormalised}]\r\n              </h1> */}\r\n              <ExchangeRatesForm\r\n                sourceCurrencyIsoCode={sourceCurrencyIsoCodeNormalised}\r\n                handleSourceCurrencyChange={handleSourceCurrencyChange}\r\n              />\r\n              <ExchangeRates data={data} />\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface ExchangeRateLatestResponse {\r\n  rates: { [key: string]: number };\r\n\r\n  base: string;\r\n  date: Date;\r\n}\r\n\r\nexport default FetchExchangeRateLatest;\r\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FetchExchangeRateLatest from \"./components/ExchangeRates\";\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload!!!\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <>\n      <FetchExchangeRateLatest sourceCurrencyIsoCode=\"GBP\" />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}