{"version":3,"sources":["components/ExchangeRates.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","overflowX","table","th","fontWeight","ExchangeRates","data","classes","TableContainer","component","Paper","Table","className","size","aria-label","TableHead","TableRow","TableCell","TableBody","scope","base","date","align","Object","entries","rates","sort","map","rate","key","toFixed","FetchExchangeRateLatest","useState","undefined","setData","loading","setLoading","a","fetch","responseJson","json","response","useEffect","fetchMyAPI","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mZAWMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,OACPC,UAAW,QAEbC,MAAO,GAGPC,GAAI,CACFC,WAAY,OAQVC,EAA8C,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/CC,EAAUV,IAEhB,OACE,oCACE,kBAACW,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CACEC,UAAWL,EAAQL,MACnBW,KAAK,QACLC,aAAW,mBAEX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWL,UAAWL,EAAQJ,IAA9B,mBACA,kBAACc,EAAA,EAAD,CAAWL,UAAWL,EAAQJ,IAA9B,UAGJ,kBAACe,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWR,UAAU,KAAKU,MAAM,OAC7Bb,EAAKc,MAER,kBAACH,EAAA,EAAD,KAAYX,EAAKe,UAKzB,kBAACb,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CACEC,UAAWL,EAAQL,MACnBW,KAAK,QACLC,aAAW,kBAEX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWL,UAAWL,EAAQJ,IAA9B,mBACA,kBAACc,EAAA,EAAD,CAAWL,UAAWL,EAAQJ,GAAImB,MAAM,SAAxC,UAKJ,kBAACJ,EAAA,EAAD,KACGK,OAAOC,QAAQlB,EAAKmB,OAClBC,OACAC,KAAI,SAAAC,GAAI,OACP,kBAACZ,EAAA,EAAD,CAAUa,IAAKD,EAAK,IAClB,kBAACX,EAAA,EAAD,KAAYW,EAAK,IACjB,kBAACX,EAAA,EAAD,CAAWK,MAAM,SAASM,EAAK,GAAGE,QAAQ,aAiD7CC,EAvCiB,WAAO,IAAD,EACZC,wBACtBC,GAFkC,mBAC7B3B,EAD6B,KACvB4B,EADuB,OAINF,oBAAS,GAJH,mBAI7BG,EAJ6B,KAIpBC,EAJoB,iDAMpC,8BAAAC,EAAA,4DACc,kDADd,SAG6BC,MAFf,mDADd,cAGQC,EAHR,gBAKqDA,EAAaC,OALlE,OAKQC,EALR,OAOEP,EAAQO,GACRL,GAAW,GARb,4CANoC,sBAqBpC,OAJAM,qBAAU,YAjB0B,mCAkBlCC,KACC,IAGD,6BACGR,EACC,2CAEA,6BAAM7B,GAAQ,kBAAC,EAAD,CAAeA,KAAMA,OCpF5BsC,MAtBf,WACE,OAiBE,kBAAC,EAAD,OCXgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6e93ae0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    // minWidth: 650\r\n  },\r\n  th: {\r\n    fontWeight: 900\r\n  }\r\n});\r\n\r\ninterface ExchangeRatesProps {\r\n  data: ExchangeRateLatestResponse;\r\n}\r\n\r\nconst ExchangeRates: React.FC<ExchangeRatesProps> = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"Source Currency\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.th}>Source Currency</TableCell>\r\n              <TableCell className={classes.th}>Date</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {data.base}\r\n              </TableCell>\r\n              <TableCell>{data.date}</TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"Exchange Rates\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.th}>Target Currency</TableCell>\r\n              <TableCell className={classes.th} align=\"right\">\r\n                Rate\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {Object.entries(data.rates)\r\n              .sort()\r\n              .map(rate => (\r\n                <TableRow key={rate[0]}>\r\n                  <TableCell>{rate[0]}</TableCell>\r\n                  <TableCell align=\"right\">{rate[1].toFixed(2)}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nconst FetchExchangeRateLatest = () => {\r\n  const [data, setData] = useState<ExchangeRateLatestResponse | undefined>(\r\n    undefined\r\n  );\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function fetchMyAPI() {\r\n    const url = \"https://api.exchangeratesapi.io/latest?base=GBP\";\r\n\r\n    const responseJson = await fetch(url);\r\n\r\n    const response: ExchangeRateLatestResponse = await responseJson.json();\r\n\r\n    setData(response);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <div>...loading</div>\r\n      ) : (\r\n        <div>{data && <ExchangeRates data={data} />}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface ExchangeRateLatestResponse {\r\n  rates: { [key: string]: number };\r\n\r\n  base: string;\r\n  date: Date;\r\n}\r\n\r\nexport default FetchExchangeRateLatest;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FetchExchangeRateLatest from \"./components/ExchangeRates\";\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload!!!\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <FetchExchangeRateLatest />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}